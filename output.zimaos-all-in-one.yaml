openapi: 3.0.3
info:
  title: CasaOS Installer API
  version: v2
  description: API for installing and updating CasaOS on a device
servers:
  - url: /v2/installer
security:
  - access_token: []
tags:
  - name: Common methods
    description: methods for common usage
  - name: OTA methods
    description: methods for OTA usage
  - name: Mount methods
    description: Low-level API
  - name: Merge methods
    description: High-level API
  - name: Raid methods
    description: Raid API
  - name: Disk methods
    description: Disk API
  - name: Storage methods
    description: Storage API
  - name: Merge
    description: <SchemaDefinition schemaRef="#/components/schemas/Merge" />
  - name: Mount
    description: <SchemaDefinition schemaRef="#/components/schemas/Mount" />
  - name: USB methods
    description: USB methods
paths:
  /background:
    get:
      summary: Get the background image of the latest release
      operationId: getBackground
      parameters:
        - $ref: '#/components/parameters/Version'
      tags:
        - Web methods
        - OTA methods
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/ResponseNotFound'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
  /release:
    get:
      summary: Get the information about the latest release of CasaOS
      operationId: getRelease
      tags:
        - Web methods
        - OTA methods
      parameters:
        - $ref: '#/components/parameters/Version'
      responses:
        '200':
          $ref: '#/components/responses/ReleaseOK'
        '404':
          $ref: '#/components/responses/ResponseNotFound'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
    post:
      summary: Install a release of CasaOS
      operationId: installRelease
      tags:
        - Common methods
        - OTA methods
      parameters:
        - $ref: '#/components/parameters/Version'
      responses:
        '200':
          $ref: '#/components/responses/ResponseOK'
        '404':
          $ref: '#/components/responses/ResponseNotFound'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
  /install:
    get:
      summary: Get the Info of the installation. such as install package path
      operationId: getInstall
      tags:
        - Common methods
        - OTA methods
      responses:
        '200':
          $ref: '#/components/responses/InstallInfoOk'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
  /status:
    get:
      deprecated: true
      summary: Get the status of the OTA program.
      tags:
        - Common methods
        - OTA methods
      operationId: getStatus
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
  /reset:
    put:
      deprecated: true
      summary: Change error status to idle
      operationId: resetStatus
      tags:
        - Web methods
        - OTA methods
      responses:
        '200':
          $ref: '#/components/responses/ResponseOK'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
  /web/notice:
    get:
      summary: Get the notice info of Update Info
      operationId: getNoticeInfo
      tags:
        - Web methods
        - OTA methods
      responses:
        '200':
          $ref: '#/components/responses/NoticeInfoOK'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError'
  /disk:
    get:
      summary: Get disks
      description: 'Get a list of all disks, or a single disk by path.'
      operationId: getDisks
      parameters:
        - name: free
          in: query
          description: Filter the results by path
          schema:
            type: string
            example: show
      tags:
        - Disk methods
      responses:
        '200':
          $ref: '#/components/responses/GetDisksResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError1'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /disk/info:
    get:
      summary: Get disk info
      description: 'Get a list of all disks, or a single disk by path.'
      operationId: getDiskInfo
      tags:
        - Disk methods
      parameters:
        - name: path
          in: query
          description: Filter the results by path
          schema:
            type: string
            example: /dev/sda
      responses:
        '200':
          $ref: '#/components/responses/GetDiskInfoResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError1'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /storage:
    get:
      summary: Get storages
      description: 'Get a list of all storage, or a single storage by path.'
      operationId: getStorage
      tags:
        - Storage methods
      parameters:
        - name: system
          in: query
          description: Whether system storage is required
          schema:
            type: string
            example: show
        - name: path
          in: query
          description: Filter the results by path
          schema:
            type: string
            example: /dev/sda
      responses:
        '200':
          $ref: '#/components/responses/GetStorageResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError1'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    post:
      summary: Create a storage
      description: Create a storage
      operationId: createStorage
      tags:
        - Storage methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostStorageBody'
      responses:
        '200':
          $ref: '#/components/responses/PostStorageResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError1'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    delete:
      summary: Delete a storage
      description: Delete a storage by path
      operationId: deleteStorage
      tags:
        - Storage methods
      parameters:
        - name: path
          in: query
          required: true
          description: Filter the delete by path
          schema:
            type: string
            example: /dev/sda
      responses:
        '200':
          $ref: '#/components/responses/ResponseOKRequest'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError1'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /storages:
    get:
      summary: Get all storages
      description: 'Get a list of all storage, or a single storage by path.'
      operationId: getAllStorages
      tags:
        - Storage methods
      responses:
        '200':
          $ref: '#/components/responses/GetStoragesOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '500':
          $ref: '#/components/responses/ResponseInternalServerError1'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /raid:
    get:
      summary: Get raids
      description: 'Get a list of all raids, or a single raid by name.'
      operationId: getRaids
      tags:
        - Raid methods
      parameters:
        - name: path
          in: query
          description: Filter the results by raid
          schema:
            type: string
            example: /dev/md0
      responses:
        '200':
          $ref: '#/components/responses/GetRaidsResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    post:
      summary: create a raid
      description: Create a raid
      operationId: createRaid
      tags:
        - Raid methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaidBody'
      responses:
        '200':
          $ref: '#/components/responses/SetRaidResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    put:
      summary: Update a raid
      description: Update raid-related configurations by name
      operationId: updateRaid
      tags:
        - Raid methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRaidBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateRaidResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    delete:
      summary: Delete a raid
      description: Delete a raid by path
      operationId: deleteRaid
      tags:
        - Raid methods
      parameters:
        - name: path
          in: query
          required: true
          description: Filter the delete by raid
          schema:
            type: string
            example: /dev/md0
      responses:
        '200':
          $ref: '#/components/responses/DeleteRaidResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /merge:
    get:
      summary: Get merges
      description: (TODO)
      operationId: getMerges
      tags:
        - Merge methods
      parameters:
        - name: mount_point
          in: query
          description: Filter the results by mount point
          schema:
            type: string
            example: /DATA
      responses:
        '200':
          $ref: '#/components/responses/GetMergesResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    post:
      summary: Set a merge
      description: (TODO)
      operationId: setMerge
      tags:
        - Merge methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merge'
      responses:
        '200':
          $ref: '#/components/responses/SetMergeResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /merge/init:
    get:
      summary: Get merge initialization status
      description: (TODO)
      operationId: getMergeInitStatus
      tags:
        - Merge methods
      responses:
        '200':
          $ref: '#/components/responses/GetMergeInitStatusResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
    post:
      summary: Initialize a merge
      description: (TODO)
      operationId: initMerge
      tags:
        - Merge methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MountPoint'
      responses:
        '200':
          $ref: '#/components/responses/InitMergeResponseOK'
        '503':
          $ref: '#/components/responses/ResponseServiceUnavailable'
  /mount:
    get:
      summary: Get mounted volumes
      description: >-
        Get all volumes currently mounted on the system. Volumes can be filtered
        by corresponding query parameters.
      operationId: getMounts
      tags:
        - Mount methods
      parameters:
        - name: id
          in: query
          description: Filter the results by id
          schema:
            type: string
            example: '0'
        - name: mount_point
          in: query
          description: Filter the results by mount point
          schema:
            type: string
            example: /
        - name: type
          in: query
          description: Filter the results by type
          schema:
            type: string
            example: ext4
        - name: source
          in: query
          description: Filter the results by source
          schema:
            type: string
            example: /dev/sda1
      responses:
        '200':
          $ref: '#/components/responses/GetMountsResponseOK'
    post:
      summary: Mount a volume
      description: (TODO)
      operationId: mount
      tags:
        - Mount methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mount'
      responses:
        '200':
          $ref: '#/components/responses/AddMountResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '403':
          $ref: '#/components/responses/ResponseForbidden'
        '409':
          $ref: '#/components/responses/ResponseConflict'
    put:
      summary: Update a mount volume
      description: >-
        Updating a mount volume is equivalent to unmounting the volume and
        mounting it again with the new parameters.
      operationId: updateMount
      tags:
        - Mount methods
      parameters:
        - name: mount_point
          in: query
          required: true
          description: Filter the results by mount point
          schema:
            type: string
            example: /
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mount'
      responses:
        '200':
          $ref: '#/components/responses/UpdateMountResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '403':
          $ref: '#/components/responses/ResponseForbidden'
        '404':
          $ref: '#/components/responses/ResponseNotFound1'
        '409':
          $ref: '#/components/responses/ResponseConflict'
    delete:
      summary: Umount volume
      description: (TODO)
      operationId: Umount
      tags:
        - Mount methods
      parameters:
        - name: mount_point
          in: query
          required: true
          description: Filter the results by mount point
          schema:
            type: string
            example: /DATA
      responses:
        '200':
          $ref: '#/components/responses/UmountResponseOK'
        '400':
          $ref: '#/components/responses/ResponseBadRequest1'
        '403':
          $ref: '#/components/responses/ResponseForbidden'
        '404':
          $ref: '#/components/responses/ResponseNotFound1'
        '409':
          $ref: '#/components/responses/ResponseConflict'
  /usb/usb-auto-mount:
    put:
      summary: Enable or disable USB auto-mounting
      description: Enable or disable USB auto-mounting.
      operationId: putSystemUSBAutoMount
      tags:
        - USB methods
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: USB auto-mounting state
                  example: 'on'
      responses:
        '200':
          $ref: '#/components/responses/ResponseOK1'
    get:
      summary: Get USB auto-mounting status
      description: Get system USB auto-mount state
      operationId: getSystemUSBAutoMount
      tags:
        - USB methods
      responses:
        '200':
          $ref: '#/components/responses/SystemUSBAutoMountOK'
components:
  schemas:
    BaseResponse:
      properties:
        message:
          description: message returned by server side if there is any
          type: string
          example: ''
    Status:
      readOnly: true
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum:
            - idle
            - fetchUpdating
            - fetchError
            - downloading
            - downloadError
            - installing
            - installError
    NoticeInfoOKData:
      type: string
      enum:
        - no-update
        - normal-update
        - important-update
        - force-update
    Release:
      readOnly: true
      required:
        - version
        - release_notes
        - mirrors
        - packages
        - checksums
        - modules
      properties:
        version:
          type: string
          example: v0.4.5
        release_notes:
          type: string
          example: |
            Changes:
            ...
          x-oapi-codegen-extra-tags:
            yaml: 'release_notes,omitempty'
        code:
          type: string
          example: Big Sur
        background:
          type: string
          example: 'https://ubuntu/get/releases/download/v0.4.4-alpha2/background.png'
        important:
          type: boolean
          example: true
        mirrors:
          type: array
          minItems: 1
          items:
            type: string
            example: 'https://github.com/IceWhaleTech'
        packages:
          type: array
          minItems: 3
          items:
            $ref: '#/components/schemas/Package'
        checksums:
          type: string
          example: /get/releases/download/v0.4.4-alpha2/checksums.txt
        modules:
          type: array
          items:
            $ref: '#/components/schemas/Module'
    Package:
      readOnly: true
      required:
        - path
        - architecture
      properties:
        path:
          type: string
          example: >-
            /get/releases/download/v0.4.4-alpha1/casaos-amd64-v0.4.4-alpha1.tar.gz
        architecture:
          type: string
          enum:
            - amd64
            - arm64
            - arm-7
    Module:
      readOnly: true
      required:
        - name
        - short
      properties:
        name:
          type: string
          example: casaos-gateway
        short:
          type: string
          example: gateway
    BaseResponse1:
      properties:
        message:
          readOnly: true
          description: message returned by server side if there is any
          type: string
          example: ''
    MountPoint:
      type: object
      required:
        - mount_point
      properties:
        mount_point:
          type: string
          example: /DATA
    MergeStatus:
      type: string
      enum:
        - initialized
        - uninitialized
        - error
      default: initialized state
      example: initialized
    Merge:
      type: object
      required:
        - mount_point
      properties:
        id:
          type: integer
          readOnly: true
        fstype:
          type: string
          default: fuse.mergerfs
        mount_point:
          type: string
          example: /DATA
        source_base_path:
          type: string
          example: /var/lib/casaos/files
        source_volume_uuids:
          type: array
          items:
            type: string
            example: 5c682e86-cec3-4761-9350-8e1a0c2d1ae9
        created_at:
          type: string
          readOnly: true
          format: date-time
        updated_at:
          type: string
          readOnly: true
          format: date-time
    Mount:
      type: object
      required:
        - mount_point
      properties:
        id:
          type: integer
          readOnly: true
        mount_point:
          type: string
          example: /DATA
        fstype:
          type: string
          example: fuse.mergerfs
        source:
          type: string
          example: '/mnt/a:/mnt/b'
        options:
          type: string
          example: >-
            defaults,allow_other,category.create=mfs,moveonenospc=true,minfreespace=1M
        extended:
          type: object
          description: Extended properties of the mount
          additionalProperties:
            type: string
          example:
            mergerfs.srcmounts: '/mnt/a:/mnt/b'
    Volume:
      type: object
      required:
        - path
        - mount_point
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          description: (TODO)
          readOnly: true
          example: 5c682e86-cec3-4761-9350-8e1a0c2d1ae9
        path:
          type: string
          example: /dev/sdb1
        state:
          type: integer
          description: (TODO)
        mount_point:
          type: string
          example: /mnt/sdb_1
        created_at:
          type: string
          readOnly: true
          format: date-time
    Raid:
      type: object
      properties:
        name:
          type: string
          example: aaaa
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        mount_point:
          type: string
          example: /DATA
        raid_level:
          type: integer
          example: 5
        size:
          type: integer
          example: 2222222222
        used:
          type: integer
          example: 2222222222
        percentage:
          type: number
          format: double
          example: 1
        shortage:
          type: boolean
          example: false
        damaged:
          type: boolean
          example: false
        finish_time:
          type: number
          format: double
          example: 1
        path:
          type: string
          example: /dev/md0
        disk_number:
          type: integer
          example: 1
        status:
          type: string
          enum:
            - recover
            - idle
            - reshape
        dev_size:
          type: integer
          description: The size of the smallest disk in RAID.
          example: 4194304000
    Device:
      type: object
      properties:
        health:
          type: boolean
          example: false
        faulty:
          type: boolean
          description: Whether the disk is faulty in RAID
          example: false
        path:
          type: string
          example: /dev/sdb
        size:
          type: integer
          example: 2222222222
        index:
          type: integer
          example: 1
        model:
          type: string
          example: aaaa
        type:
          type: string
          example: aaaa
    PutRaidBody:
      type: object
      properties:
        path:
          type: string
          example: /dev/md0
        action:
          type: string
          enum:
            - add
            - remove
          example: add
        devices:
          type: array
          items:
            type: string
            description: 'Here''s the disk number, so be careful.'
            example: /dev/sda
    RaidBody:
      type: object
      required:
        - devices
        - raid_level
        - name
      properties:
        devices:
          type: array
          items:
            type: string
            description: 'Here''s the disk number, so be careful.'
            example: '1'
        raid_level:
          type: integer
          enum:
            - 0
            - 1
            - 5
          example: 5
        is_default:
          type: boolean
          description: Whether to replace the existing /DATA directory
          example: false
        mount_point:
          type: string
          example: /DATA
        name:
          type: string
          example: aaaa
        path:
          type: string
          example: /dev/md0
    Chilren:
      type: object
      properties:
        name:
          type: string
          example: aaaa
        mount_point:
          type: string
          example: /media/aaaa
        path:
          type: string
          example: /dev/sdb
        storage_name:
          type: string
          example: aaaa
        size:
          type: integer
          example: 2222222222
        supported:
          type: boolean
          example: false
        file_system:
          type: string
          example: ext4
        raid:
          type: boolean
          example: false
        raid_level:
          type: integer
          example: 1
    Disk:
      type: object
      properties:
        name:
          type: string
          example: aaaa
        storage_name:
          type: string
          example: aaaa
        size:
          type: integer
          example: 2222222222
        model:
          type: string
          example: aaaa
        health:
          type: string
          example: healthy
        temperature:
          type: integer
          example: 1
        type:
          $ref: '#/components/schemas/DiskType'
        need_format:
          type: boolean
          example: false
        serial:
          type: string
          example: aaaa
        path:
          type: string
          example: /dev/sdb
        children_number:
          type: integer
          example: 1
        support:
          type: boolean
          example: false
        index:
          type: integer
          example: 1
        free:
          type: boolean
          example: false
        usage:
          type: string
          example: storage
        children:
          type: array
          items:
            $ref: '#/components/schemas/Chilren'
        rota:
          type: boolean
          example: false
    Partition:
      type: object
      properties:
        name:
          type: string
          example: aaaa
        size:
          type: integer
          example: 2222222222
        supported:
          type: boolean
          example: false
        FileSystem:
          type: string
          example: ext4
    DiskInfo:
      type: object
      properties:
        disk:
          $ref: '#/components/schemas/Disk'
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/Partition'
    Storage:
      type: object
      properties:
        uuid:
          type: string
          example: aaaa
        mount_point:
          type: string
          example: /DATA
        size:
          type: string
          example: '2222222222'
        avail:
          type: string
          example: '2222222222'
        used:
          type: string
          example: '2222222222'
        type:
          type: string
          example: aaaa
        path:
          type: string
          example: /dev/sdb
        drive_name:
          type: string
          example: aaaa
        name:
          type: string
          example: aaaa
        persisted_in:
          type: string
          example: casaos
        disk_type:
          $ref: '#/components/schemas/DiskType'
        raid:
          type: boolean
          example: false
        raid_level:
          type: integer
          example: 1
        health:
          type: boolean
          example: true
    DiskType:
      type: string
      enum:
        - HDD
        - SSD
        - USB
        - NVME
        - MMC
      example: HDD
    PostStorageBody:
      type: object
      required:
        - path
        - name
      properties:
        path:
          type: string
          example: /dev/sdb
        name:
          type: string
          example: DATA
        format:
          type: boolean
          example: false
    StorageAggrgation:
      required:
        - name
        - font
        - path
        - type
        - extensions
      type: object
      properties:
        name:
          type: string
          example: SD
        font:
          type: string
          example: aaaa
        path:
          type: string
          example: /dev/md0
        type:
          type: string
          enum:
            - raid
            - system
            - USB
            - disk
            - cloud
            - smb
        extensions:
          type: object
          description: extensions
          example: mounted
    BaseResponse2:
      properties:
        message:
          readOnly: true
          description: message returned by server side if there is any
          type: string
          example: ''
  responses:
    ResponseOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
    ResponseInternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            message: Internal Server Error
    ResponseNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            message: Not Found
    ResponseBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
          example:
            message: Bad Request
    ReleaseOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - properties:
                  data:
                    $ref: '#/components/schemas/Release'
                  upgradable:
                    readOnly: true
                    type: boolean
                    example: false
    InstallInfoOk:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - properties:
                  path:
                    type: string
                    example: /var/lib/casaos_data/offline/test.raucb
    StatusOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - properties:
                  data:
                    $ref: '#/components/schemas/Status'
    NoticeInfoOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - properties:
                  data:
                    $ref: '#/components/schemas/NoticeInfoOKData'
    PostStorageResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/PostStorageBody'
    GetStorageResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Storage'
    GetStoragesOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/StorageAggrgation'
    GetDiskInfoResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DiskInfo'
    GetDisksResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Disk'
    GetRaidsResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Raid'
    DeleteRaidResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
    SetRaidResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/Raid'
    UpdateRaidResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/Raid'
    GetMergesResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Merge'
    SetMergeResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Merge'
    GetMergeInitStatusResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MergeStatus'
    InitMergeResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MergeStatus'
    GetMountsResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mount'
    AddMountResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Mount'
    UpdateMountResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Mount'
    UmountResponseOK:
      description: OK
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
    ResponseOKRequest:
      description: OK Request
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: OK Request
    ResponseBadRequest1:
      description: Bad Request
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: Bad Request
    ResponseInternalServerError1:
      description: Internal Server Error
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: Internal Server Error
    ResponseNotFound1:
      description: Not Found
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: Not Found
    ResponseForbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: Forbidden
    ResponseConflict:
      description: Conflict
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: Conflict
    ResponseServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            readOnly: true
            allOf:
              - $ref: '#/components/schemas/BaseResponse1'
          example:
            message: Service Unavailable
    ResponseOK1:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse2'
    SystemUSBAutoMountOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse2'
            type: object
            properties:
              state:
                type: string
                description: USB auto-mounting state
                example: 'true'
  parameters:
    Version:
      name: version
      in: query
      description: version of the release
      required: false
      schema:
        type: string
        default: latest
  securitySchemes:
    access_token:
      type: apiKey
      in: header
      name: Authorization
x-tagGroups:
  - name: Methods
    tags:
      - Common methods
      - OTA methods
      - Web methods
