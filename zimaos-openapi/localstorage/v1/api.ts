/* tslint:disable */
/* eslint-disable */
/**
 * CasaOS Local Storage API
 * <picture>     <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800px.png\">     <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png\">     <img alt=\"CasaOS\" src=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png\"> </picture>  CasaOS Local Storage service manages local storage including disks, partitions and mounting points.  This API allows interacting with the service to conduct such management.  For issues and discussions, please visit the [GitHub repository](https://github.com/IceWhaleTech/CasaOS) or join [our Discord](https://discord.gg/knqAbbBbeX).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof BaseResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PutSystemUSBAutoMountRequest
 */
export interface PutSystemUSBAutoMountRequest {
    /**
     * USB auto-mounting state
     * @type {string}
     * @memberof PutSystemUSBAutoMountRequest
     */
    'state'?: string;
}

/**
 * USBMethodsApi - axios parameter creator
 * @export
 */
export const USBMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get system USB auto-mount state
         * @summary Get USB auto-mounting status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemUSBAutoMount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usb/usb-auto-mount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable USB auto-mounting.
         * @summary Enable or disable USB auto-mounting
         * @param {PutSystemUSBAutoMountRequest} [putSystemUSBAutoMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSystemUSBAutoMount: async (putSystemUSBAutoMountRequest?: PutSystemUSBAutoMountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usb/usb-auto-mount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putSystemUSBAutoMountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * USBMethodsApi - functional programming interface
 * @export
 */
export const USBMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = USBMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get system USB auto-mount state
         * @summary Get USB auto-mounting status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemUSBAutoMount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemUSBAutoMount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['USBMethodsApi.getSystemUSBAutoMount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable or disable USB auto-mounting.
         * @summary Enable or disable USB auto-mounting
         * @param {PutSystemUSBAutoMountRequest} [putSystemUSBAutoMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSystemUSBAutoMount(putSystemUSBAutoMountRequest?: PutSystemUSBAutoMountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSystemUSBAutoMount(putSystemUSBAutoMountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['USBMethodsApi.putSystemUSBAutoMount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * USBMethodsApi - factory interface
 * @export
 */
export const USBMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = USBMethodsApiFp(configuration)
    return {
        /**
         * Get system USB auto-mount state
         * @summary Get USB auto-mounting status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemUSBAutoMount(options?: RawAxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.getSystemUSBAutoMount(options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable USB auto-mounting.
         * @summary Enable or disable USB auto-mounting
         * @param {PutSystemUSBAutoMountRequest} [putSystemUSBAutoMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSystemUSBAutoMount(putSystemUSBAutoMountRequest?: PutSystemUSBAutoMountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.putSystemUSBAutoMount(putSystemUSBAutoMountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * USBMethodsApi - object-oriented interface
 * @export
 * @class USBMethodsApi
 * @extends {BaseAPI}
 */
export class USBMethodsApi extends BaseAPI {
    /**
     * Get system USB auto-mount state
     * @summary Get USB auto-mounting status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof USBMethodsApi
     */
    public getSystemUSBAutoMount(options?: RawAxiosRequestConfig) {
        return USBMethodsApiFp(this.configuration).getSystemUSBAutoMount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable or disable USB auto-mounting.
     * @summary Enable or disable USB auto-mounting
     * @param {PutSystemUSBAutoMountRequest} [putSystemUSBAutoMountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof USBMethodsApi
     */
    public putSystemUSBAutoMount(putSystemUSBAutoMountRequest?: PutSystemUSBAutoMountRequest, options?: RawAxiosRequestConfig) {
        return USBMethodsApiFp(this.configuration).putSystemUSBAutoMount(putSystemUSBAutoMountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



