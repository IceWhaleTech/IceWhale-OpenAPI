/* tslint:disable */
/* eslint-disable */
/**
 * CasaOS Installer API
 * API for installing and updating CasaOS on a device
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof BaseResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetInstall200Response
 */
export interface GetInstall200Response {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof GetInstall200Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInstall200Response
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface GetNoticeInfo200Response
 */
export interface GetNoticeInfo200Response {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof GetNoticeInfo200Response
     */
    'message'?: string;
    /**
     * 
     * @type {NoticeInfoOKData}
     * @memberof GetNoticeInfo200Response
     */
    'data'?: NoticeInfoOKData;
}


/**
 * 
 * @export
 * @interface GetRelease200Response
 */
export interface GetRelease200Response {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof GetRelease200Response
     */
    'message'?: string;
    /**
     * 
     * @type {Release}
     * @memberof GetRelease200Response
     */
    'data'?: Release;
    /**
     * 
     * @type {boolean}
     * @memberof GetRelease200Response
     */
    'upgradable'?: boolean;
}
/**
 * 
 * @export
 * @interface GetStatus200Response
 */
export interface GetStatus200Response {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof GetStatus200Response
     */
    'message'?: string;
    /**
     * 
     * @type {Status}
     * @memberof GetStatus200Response
     */
    'data'?: Status;
}
/**
 * 
 * @export
 * @interface Module
 */
export interface Module {
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    'short': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NoticeInfoOKData = {
    NoUpdate: 'no-update',
    NormalUpdate: 'normal-update',
    ImportantUpdate: 'important-update',
    ForceUpdate: 'force-update'
} as const;

export type NoticeInfoOKData = typeof NoticeInfoOKData[keyof typeof NoticeInfoOKData];


/**
 * 
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    'architecture': PackageArchitectureEnum;
}

export const PackageArchitectureEnum = {
    Amd64: 'amd64',
    Arm64: 'arm64',
    Arm7: 'arm-7'
} as const;

export type PackageArchitectureEnum = typeof PackageArchitectureEnum[keyof typeof PackageArchitectureEnum];

/**
 * 
 * @export
 * @interface Release
 */
export interface Release {
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    'release_notes': string;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    'background'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Release
     */
    'important'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Release
     */
    'mirrors': Array<string>;
    /**
     * 
     * @type {Array<Package>}
     * @memberof Release
     */
    'packages': Array<Package>;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    'checksums': string;
    /**
     * 
     * @type {Array<Module>}
     * @memberof Release
     */
    'modules': Array<Module>;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'status': StatusStatusEnum;
}

export const StatusStatusEnum = {
    Idle: 'idle',
    FetchUpdating: 'fetchUpdating',
    FetchError: 'fetchError',
    Downloading: 'downloading',
    DownloadError: 'downloadError',
    Installing: 'installing',
    InstallError: 'installError'
} as const;

export type StatusStatusEnum = typeof StatusStatusEnum[keyof typeof StatusStatusEnum];


/**
 * CommonMethodsApi - axios parameter creator
 * @export
 */
export const CommonMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the Info of the installation. such as install package path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstall: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/install`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the status of the OTA program.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Install a release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installRelease: async (version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonMethodsApi - functional programming interface
 * @export
 */
export const CommonMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the Info of the installation. such as install package path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstall(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInstall200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstall(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonMethodsApi.getInstall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the status of the OTA program.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonMethodsApi.getStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Install a release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installRelease(version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.installRelease(version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommonMethodsApi.installRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommonMethodsApi - factory interface
 * @export
 */
export const CommonMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonMethodsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the Info of the installation. such as install package path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstall(options?: RawAxiosRequestConfig): AxiosPromise<GetInstall200Response> {
            return localVarFp.getInstall(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the status of the OTA program.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getStatus(options?: RawAxiosRequestConfig): AxiosPromise<GetStatus200Response> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Install a release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installRelease(version?: string, options?: RawAxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.installRelease(version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonMethodsApi - object-oriented interface
 * @export
 * @class CommonMethodsApi
 * @extends {BaseAPI}
 */
export class CommonMethodsApi extends BaseAPI {
    /**
     * 
     * @summary Get the Info of the installation. such as install package path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonMethodsApi
     */
    public getInstall(options?: RawAxiosRequestConfig) {
        return CommonMethodsApiFp(this.configuration).getInstall(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the status of the OTA program.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CommonMethodsApi
     */
    public getStatus(options?: RawAxiosRequestConfig) {
        return CommonMethodsApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Install a release of CasaOS
     * @param {string} [version] version of the release
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonMethodsApi
     */
    public installRelease(version?: string, options?: RawAxiosRequestConfig) {
        return CommonMethodsApiFp(this.configuration).installRelease(version, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OTAMethodsApi - axios parameter creator
 * @export
 */
export const OTAMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the background image of the latest release
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackground: async (version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/background`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Info of the installation. such as install package path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstall: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/install`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the notice info of Update Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoticeInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/web/notice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the information about the latest release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelease: async (version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the status of the OTA program.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Install a release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installRelease: async (version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change error status to idle
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        resetStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OTAMethodsApi - functional programming interface
 * @export
 */
export const OTAMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OTAMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the background image of the latest release
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBackground(version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBackground(version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.getBackground']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the Info of the installation. such as install package path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstall(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInstall200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstall(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.getInstall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the notice info of Update Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoticeInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNoticeInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNoticeInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.getNoticeInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the information about the latest release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelease(version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRelease200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelease(version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.getRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the status of the OTA program.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.getStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Install a release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installRelease(version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.installRelease(version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.installRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change error status to idle
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async resetStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OTAMethodsApi.resetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OTAMethodsApi - factory interface
 * @export
 */
export const OTAMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OTAMethodsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the background image of the latest release
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackground(version?: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getBackground(version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Info of the installation. such as install package path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstall(options?: RawAxiosRequestConfig): AxiosPromise<GetInstall200Response> {
            return localVarFp.getInstall(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the notice info of Update Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoticeInfo(options?: RawAxiosRequestConfig): AxiosPromise<GetNoticeInfo200Response> {
            return localVarFp.getNoticeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the information about the latest release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelease(version?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetRelease200Response> {
            return localVarFp.getRelease(version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the status of the OTA program.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getStatus(options?: RawAxiosRequestConfig): AxiosPromise<GetStatus200Response> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Install a release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installRelease(version?: string, options?: RawAxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.installRelease(version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change error status to idle
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        resetStatus(options?: RawAxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.resetStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OTAMethodsApi - object-oriented interface
 * @export
 * @class OTAMethodsApi
 * @extends {BaseAPI}
 */
export class OTAMethodsApi extends BaseAPI {
    /**
     * 
     * @summary Get the background image of the latest release
     * @param {string} [version] version of the release
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public getBackground(version?: string, options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).getBackground(version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the Info of the installation. such as install package path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public getInstall(options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).getInstall(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the notice info of Update Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public getNoticeInfo(options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).getNoticeInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the information about the latest release of CasaOS
     * @param {string} [version] version of the release
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public getRelease(version?: string, options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).getRelease(version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the status of the OTA program.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public getStatus(options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Install a release of CasaOS
     * @param {string} [version] version of the release
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public installRelease(version?: string, options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).installRelease(version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change error status to idle
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OTAMethodsApi
     */
    public resetStatus(options?: RawAxiosRequestConfig) {
        return OTAMethodsApiFp(this.configuration).resetStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebMethodsApi - axios parameter creator
 * @export
 */
export const WebMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the background image of the latest release
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackground: async (version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/background`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the notice info of Update Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoticeInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/web/notice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the information about the latest release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelease: async (version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change error status to idle
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        resetStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebMethodsApi - functional programming interface
 * @export
 */
export const WebMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the background image of the latest release
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBackground(version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBackground(version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebMethodsApi.getBackground']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the notice info of Update Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoticeInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNoticeInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNoticeInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebMethodsApi.getNoticeInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the information about the latest release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelease(version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRelease200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelease(version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebMethodsApi.getRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change error status to idle
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async resetStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebMethodsApi.resetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebMethodsApi - factory interface
 * @export
 */
export const WebMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebMethodsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the background image of the latest release
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackground(version?: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getBackground(version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the notice info of Update Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoticeInfo(options?: RawAxiosRequestConfig): AxiosPromise<GetNoticeInfo200Response> {
            return localVarFp.getNoticeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the information about the latest release of CasaOS
         * @param {string} [version] version of the release
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelease(version?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetRelease200Response> {
            return localVarFp.getRelease(version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change error status to idle
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        resetStatus(options?: RawAxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.resetStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebMethodsApi - object-oriented interface
 * @export
 * @class WebMethodsApi
 * @extends {BaseAPI}
 */
export class WebMethodsApi extends BaseAPI {
    /**
     * 
     * @summary Get the background image of the latest release
     * @param {string} [version] version of the release
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMethodsApi
     */
    public getBackground(version?: string, options?: RawAxiosRequestConfig) {
        return WebMethodsApiFp(this.configuration).getBackground(version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the notice info of Update Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMethodsApi
     */
    public getNoticeInfo(options?: RawAxiosRequestConfig) {
        return WebMethodsApiFp(this.configuration).getNoticeInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the information about the latest release of CasaOS
     * @param {string} [version] version of the release
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMethodsApi
     */
    public getRelease(version?: string, options?: RawAxiosRequestConfig) {
        return WebMethodsApiFp(this.configuration).getRelease(version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change error status to idle
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WebMethodsApi
     */
    public resetStatus(options?: RawAxiosRequestConfig) {
        return WebMethodsApiFp(this.configuration).resetStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



