openapi: 3.0.3

info:
  title: IceWhale-Files API
  version: v2.0.0
  description: |
    <picture>
        <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800px.png">
        <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png">
        <img alt="CasaOS" src="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png">
    </picture>

    The api provides file-related interfaces

    For issues and discussions, please visit the [GitHub repository](https://github.com/IceWhaleTech/CasaOS) or join [our Discord](https://discord.gg/knqAbbBbeX).

servers:
  - url: /v2
    description: Development server
  - url: /v2_1/files
    # This path is maintained to ensure compatibility with the older v2 version of the API. Due to its integration across multiple projects, we have introduced a new version v2_1 to accommodate enhancements while still supporting the existing implementations that depend on v2. This strategy ensures a smooth transition and minimal disruption to ongoing services.
    description: Development server

tags:
  - name: Health methods
    description: |-
      Health Check Interface
  - name: File
    description: |-
      File-related interfaces
  - name: Folder
    description: |-
      Folder-related interfaces
  - name: Share
    description: |-
      Samba share folder
  - name: Connect
    description: |-
      Connect samba service
  - name: Recover
    description: |-
      Mount callback receive
  - name: Cloud
    description: |-
      Cloud storage
  - name: Driver
    description: |-
      Driver
  - name: Image
    description: |-
      Image 
  - name: DataMigration
    description: |-
      DataMigration API

security:
  - access_token: []

paths:
  /health/dependencies:  
    get:
      tags:
        - Health methods
      summary: Get service status
      description: |-
        Get service status
      operationId: getHealthServices
      responses:
        "200":
          $ref: "#/components/responses/GetHealthServicesOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file:
    get:
      tags:
        - File
      summary: Get a list of files in a folder
      description: Get all files and folders under a folder
      operationId: getFiles
      parameters:
        - name: path
          in: query
          description: Folder path
          example: "/DATA"
          required: true
          schema:
            type: string
        - name: index
          in: query
          description: Page number
          required: false
          example: 1
          schema:
            type: integer
        - name: size
          in: query
          description: Page size
          required: false
          example: 10
          schema:
            type: integer
        - name: sfz
          in: query
          description: send folder size by socket
          example: "true"
          schema:
            type: string
        - name: sort
          in: query
          description: file sort
          required: false
          example: "date"
          schema:
            type: string
            enum:
              - "date"
              - "name"
              - "size"
              - "format"
        - name: direction
          in: query
          description: File Sorting
          example: "true"
          schema:
            type: string
            enum:
              - "desc"
              - "asc"
          
      responses:
        "200":
          $ref: "#/components/responses/GetFilesOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - File
      summary: Create a new file
      description: Create a new file
      operationId: postCreateFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  example: "/DATA/test.log"
              required:
                - path
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      tags:
        - File
      summary: Modify file
      description: Modify file
      operationId: putFile
      requestBody:
        $ref: "#/components/requestBodies/PutFile"
      responses:
        "200":
          $ref: "#/components/responses/ResponseInterfaceOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      tags:
        - File
      summary: Delete the file
      description: Delete the file
      operationId: deleteFiles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "/DATA/test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseArrayOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/video/generate/image:
    post:
      tags:
        - File
      summary: Generate video thumbnail
      description: Generate video thumbnail
      operationId: postVideoThumbnail
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/online:
    get:
      tags:
        - File
      summary: open file online
      description: open file online
      operationId: getFilesOnline
      parameters:
        - name: path
          in: query
          description: Folder path
          example: "/DATA"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
      
  /file/compression:
    post:
      tags:
        - File
      summary: file decompress
      description: decompress zip 7z rar file
      operationId: postDecompress
      requestBody:
         $ref: "#/components/requestBodies/PostDecompress"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    get:
      tags:
        - File
      summary: preview a compression file
      description: preview a compression file
      operationId: getCompression
      parameters:
        - name: path
          in: query
          description: file path
          example: "/DATA.zip"
          required: true
          schema:
            type: string
        - name: in_path
          in: query
          description: path in the compressed package
          example: "data"
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GetFilesOKByCompression"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"       


  /file/download: 
    # 改为 /file/download，和下面 /file/upload 对应
    #
    # 如果 HTTP 请求头包含 Accept: application/json:
    #     - 保持原逻辑
    #     - 遇到不合适的文件（二进制文件）或者目录则返回 404
    #
    # 如果 HTTP 请求头包含 Accept: text/plain
    #     - 返回文本文件内容
    #     - 遇到不合适的文件（二进制文件）或者目录则返回 404
    #
    # 如果 HTTP 请求头包含 Accept: application/octet-stream:
    #
    #     - 如果 path 是一个目录，则尝试打包压缩为 zip 并输出（Content-Type: application/octet-stream）
    #     - 如果 path 是一个文件，则直接输出（Content-Type: application/octet-stream）
    get:
      tags:
        - File
      summary: Download file
      description: Get file content(Merge to /file(get) interface)
      operationId: getFileDownload
      parameters:
        - name: path
          in: query
          description: File path
          required: true
          example: "/DATA/test.log"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
              format: binary
          text/plain:
            schema:
              type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/upload:
    get:
      tags:
        - File
      summary: Check upload chunk
      parameters:
        - name: path
          in: query
          description: File path
          required: true
          example: "/DATA/test.log"
          schema:
            type: string
        - name: relativePath
          in: query
          description: File path
          required: true
          example: "/DATA/test.log"
          schema:
            type: string
        - name: filename
          in: query
          description: File name
          required: true
          example: "test.log"
          schema:
            type: string
        - name: chunkNumber
          in: query
          description: chunk number
          required: true
          example: 1
          schema:
            type: string
        - name: totalChunks
          in: query
          description: total chunks
          example: 2
          required: true
          schema:
            type: integer
      description: Check if the file block has been uploaded (needs to be modified later)
      operationId: checkUploadChunk
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - File
      summary: Upload file
      description: Upload file
      operationId: postUploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                relativePath:
                  type: string
                  example: "/DATA/test.log"
                filename:
                  type: string
                  example: "/DATA/test2.log"
                totalChunks:
                  type: string
                  example: "2"
                chunkNumber:
                  type: string
                  example: "20"
                path:
                  type: string
                  example: "/DATA"
                file:
                  type: string
                  format: binary
                chunkSize:
                  type: string
                  example: "1024"
                currentChunkSize:
                  type: string
                  example: "1024"
                totalSize:
                  type: string
                  example: "1024"
                identifier:
                  type: string
                  example: "test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/history:
    get:
      tags:
        - File
      summary: Get file history list
      description: Get file history list
      operationId: getFileHistory
      parameters:
        - name: index
          in: query
          description: index of history
          example: 1
          schema:
            type: integer
        - name: size
          in: query
          description: size of history
          example: 22
          schema:
            type: integer
        - name: type
          in: query
          description: type of history
          example: "all"
          schema:
            type: string
            enum:
              - "file"
              - "folder"
              - "all"
      responses:
        "200":
          $ref: "#/components/responses/ResponseHistoryOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - File
      summary: create a file history
      description: create a file history
      operationId: postFileHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "/DATA/test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseArrayOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Delete all history
      tags:
        - File
      description: Delete all history
      operationId: deleteAllHistory
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
        
  /file/history/{id}:
    delete:
      summary: Delete history by id
      tags:
        - File
      description: Delete history
      operationId: deleteHistory
      parameters:
        - name: id
          in: path
          description: History id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /filedrop/ws:
    get:
      tags:
        - filedrop
      summary: File transfer socket server
      description: Flash-enabled socket server
      operationId: fileWSServer
      parameters:
        - name: peer
          in: query
          description: peer id
          required: false
          example: "123456789000d0d0d0d0d0d0"
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /filedrop/peers:
    get:
      summary: Get filedrop peers
      tags:
        - filedrop
      operationId: getFiledropPeers
      responses:
        "200":
          $ref: "#/components/responses/ResponsePeersOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /folder:
    get:
      summary: Get folder info
      tags:
        - Folder
      description: Get folder info, Split by ","
      operationId: getFolderInfo
      parameters:
        - name: path
          in: query
          description: File or folder path
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: Whether to calculate the size of the folder
          schema:
            type: boolean
            example: true
      responses:
        "200":
          $ref: "#/components/responses/ResponseFolderOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - Folder
      summary: Create a folder
      description: Create a folder
      operationId: createFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  example: "/DATA/test.log"
              required:
                - path
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      tags:
        - Folder
      summary: Modify folder name
      description: Modify folder name
      operationId: putFolderName
      parameters:
        - name: path
          in: query
          description: File or folder path
          required: true
          example: "/DATA/test"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_path:
                  type: string
                  example: "/DATA/test2"
              required:
                - new_path
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      tags:
        - Folder
      summary: Delete the folder
      description: Delete the folder
      operationId: deleteFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "/DATA/test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /task/{id}:
    put:
      summary: Modify operate task
      tags:
        - File
        - Folder
      description: Modify operate task
      operationId: putOperateTask
      parameters:
        - name: id
          in: path
          description: Task id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operate:
                  type: string
                  example: "success"
                  enum:
                    - "skip"
                    - "rename"
                    - "overwrite"
              required:
                - operate
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Delete operate task
      tags:
        - File
        - Folder
      description: Delete operate task
      operationId: deleteOperateTask
      parameters:
        - name: id
          in: path
          description: Task id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /task:
    # get:
    #   summary: Get task list
    #   tags:
    #     - File
    #     - Folder
    #   description: Get task list
    #   operationId: getOperateTask
    #   responses:
    #     "200":
    #       $ref: "#/components/responses/GetTaskListOK"
    #     "400":
    #       $ref: "#/components/responses/ResponseClientError"
    #     "404":
    #       $ref: "#/components/responses/ResponseNotFoundError"
    #     "500":
    #       $ref: "#/components/responses/ResponseInternalServerError"

    post:
      summary: create a task
      tags:
        - File
        - Folder
      description: create a task
      operationId: postOperateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileTaskModel"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  
  /share:
    get:
      summary: Get share list
      tags:
        - Share
      description: Get share list
      operationId: getSharesList
      responses:
        "200":
          $ref: "#/components/responses/ResponseSharesListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: Create a share
      tags:
        - Share
      description: Create a share
      operationId: createShare
      requestBody:
        $ref: "#/components/requestBodies/PostShare"
      responses:
        "200":
          $ref: "#/components/responses/ResponseUpsertShareOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      summary: Modify a share
      tags:
        - Share
      description: Modify a share
      operationId: modifyShare
      requestBody:
        $ref: "#/components/requestBodies/PutShare"
      responses:
        "200":
          $ref: "#/components/responses/ResponseUpsertShareOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Delete a share
      tags:
        - Share
      description: Delete a share
      operationId: deleteShareByPath
      parameters:
        - name: path
          in: query
          description: Share path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  
  /share/{id}:
    delete:
      summary: Delete a share
      tags:
        - Share
      description: Delete a share
      operationId: deleteShare
      parameters:
        - name: id
          in: path
          description: Share id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /share/list:
    get:
      summary: Get share list
      tags:
        - Share
      description: Get share list
      operationId: getShareList
      parameters:
        - name: path
          in: query
          description: Share path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseShareListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /connect:
    get:
      summary: Get connect list
      tags:
        - Connect
      description: Get connect list
      operationId: getConnectList
      responses:
        "200":
          $ref: "#/components/responses/ResponseConnectListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: Create a connect
      tags:
        - Connect
      description: Create a connect
      operationId: createConnect
      requestBody:
        $ref: "#/components/requestBodies/PostConnect"
      responses:
        "200":
          $ref: "#/components/responses/ResponseInterfaceOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  
  /web/connect_cloud:
    get:
      summary: Get web connect list and cloud list
      tags:
        - Connect
      description: Get web connect list and cloud list
      operationId: getWebConnectAndCloud
      responses:
        "200":
          $ref: "#/components/responses/ResponseConnectAndCloudOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /connect/{id}:
    delete:
      summary: Delete a connect
      tags:
        - Connect
      description: Delete a connect
      operationId: deleteConnect
      parameters:
        - name: id
          in: path
          description: Connect id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /recover/{type}/:
    get:
      summary: Callback Address
      security: []
      tags:
        - Recover
      description: Callback Address
      operationId: getRecoverCallback
      parameters:
        - name: type
          in: path
          description: Recover type
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /cloud: 
    get:
      summary: Get cloud list
      tags:
        - Cloud
      description: Get cloud list
      operationId: getCloudList
      responses:
        "200":
          $ref: "#/components/responses/GetCloudListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /cloud/{name}:
    delete:
      summary: Delete a cloud
      tags:
        - Cloud
      description: Delete a cloud
      operationId: deleteCloud
      parameters:
        - name: name
          in: path
          description: Cloud name
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /driver: 
    get:
      summary: Get driver list
      tags:
        - Driver
      description: Get driver list
      operationId: getDriverList
      responses:
        "200":
          $ref: "#/components/responses/GetDriverListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /thumbnail:
    get:
      summary: Get file thumbnail
      tags:
        - Image
      description: Get file thumbnail
      operationId: getThumbnail
      parameters:
        - name: path
          in: query
          description: file type
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /pin:
    get:
      summary: get pins
      tags:
        - Pin methods
      description: getpins
      operationId: getPin
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: post a pin
      tags:
        - Pin methods
      description: add a pin
      operationId: postPin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinModel"
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      summary: put a pin
      tags:
        - Pin methods
      description: update a pin
      operationId: putPin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinList"
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: delete a pin
      tags:
        - Pin methods
      description: Pin
      operationId: deletePin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinModel"
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /migration/info:
    get:
      summary: Get migration info(path)
      tags:
        - DataMigration
      description: Get migration info
      operationId: getMigrationInfo
      responses:
        "200":
          $ref: "#/components/responses/GetMigratablePathInfoOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /migration/state:
    get:
      summary: Get migration state
      tags:
        - DataMigration
      description: Get migration state
      operationId: getMigrationState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrationStateModel"
      responses:
        "200":
          $ref: "#/components/responses/GetMigrationStateOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /migration/size/{type}:
    get:
      summary: Get migration size
      tags:
        - DataMigration
      description: Get migration size
      parameters:
        - name: type
          in: path
          description: migration type
          required: true
          schema:
            $ref: "#/components/schemas/MigrationType"
      operationId: getMigrationSize
      responses:
        "200":
          $ref: "#/components/responses/GetMigratablePathSizeOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /migration/err:
    get:
      tags:
        - DataMigration
      description: Get migration error info(the request only in the migration is error work. otherwise return 400)
      operationId: getMigrationErrorInfo
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /migration/start:
    post:
      summary: Start migration
      tags:
        - DataMigration
      description: Start migration
      operationId: startMigration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrationStartModel"
      responses:
        "200":
          $ref: "#/components/responses/GetMigrationStateOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /migration/end:
    post:
      summary: End migration(success, fail)
      tags:
        - DataMigration
      description: End migration
      operationId: endMigration
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  
  /migration/reset:
    post:
      tags:
        - DataMigration
      description: Reset migratiable data
      operationId: ResetData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - reset_type
              type: object
              properties:
                reset_type:
                  type: string
                  $ref: "#/components/schemas/MigrationType"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

components:
  securitySchemes:
    access_token:
      type: apiKey
      in: header
      name: Authorization
  requestBodies:
    PutFile:
      description: Create file
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/PutFileModel"
            required:
              - path
    PostDecompress:
      description: create decompress
      content:
        application/json:
          schema: 
            type: object
            $ref: "#/components/schemas/DecompressModel"
    PostShare:
      description: Create share
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ShareModel"
              required:
                - path
    PutShare:
      description: Modify share
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/ShareModel"
            required:
              - path
    PostConnect:
      description: Create connect
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/CreateConnectModel"
            required:
              - host
              - username
              - password
  responses:
    ResponseOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponse"
    ResponseStringOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseString"
    ResponseIntegerOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseInteger"
    GetTaskListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/FileTaskModelResult"
    ResponseArrayOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseArray"
    ResponseConnectAndCloudOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/ConnectAndCloudAggrgation"
    ResponseInterfaceOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseInterface"
    ResponseConnectListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/ConnectModel"     
    ResponseInternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
    ResponseNotFoundError:
      description: Not found error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
    ResponseClientError:
      description: Client Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
    ResponseFolderOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FolderModel"

    ResponseShareListOK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/ShareModel"
            required:
              - path

    ResponseSharesListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/ShareListModel"
    
    ResponseUpsertShareOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ShareModel"

    ResponsePeersOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/PeerModel"
    ResponseHistoryOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/HistoryModel"
    GetCloudListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/CloudModel"

    GetPinOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/PinModel"

    GetDriverListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: "#/components/schemas/DriverModel"
    GetHealthServicesOK:
      description: OK
      content:
        application/json:
          schema:
            type: string
            example: "OK"
    GetFileOK:
      description: OK
      content:
        "*/*":
          schema:
            type: string
            format: binary
    GetFilesOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileList"
    GetFilesOKByCompression:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileListByCompression"

    GetMigratablePathInfoOK:
      description: the migration info include the path and if the path present
      content:
        application/json:
          schema:
            type: object
            required:
              - docker_image
              - app_data
              - user_data
            properties:
              docker_image:
                $ref: "#/components/schemas/MigratablePathModel"
              app_data:
                $ref: "#/components/schemas/MigratablePathModel"
              user_data:
                $ref: "#/components/schemas/MigratablePathModel"
              can_migrate:
                type: boolean
                example: true

    GetMigratablePathSizeOK:
      description: the migration info include the path and if the path present
      content:
        application/json:
          schema:
            type: object
            required:
              - size
              - total_size
            properties:
              size:
                $ref: "#/components/schemas/FileSize"
              total_size:
                $ref: "#/components/schemas/FileSize"
    GetMigrationStateOK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - state
            properties:
              id:
                type: integer
                example: 1
              state:
                $ref: "#/components/schemas/MigrateState"
              type:
                $ref: "#/components/schemas/MigrationType"
              from_storage_name:
                type: string
                example: "ZimaOS-HD"
              to_storage_name:
                type: string
                example: "Main-Storage"
              progress_label:
                type: string
                example: "create symlink"
              progress:
                type: string
                example: "20"
              total_size:
                $ref: "#/components/schemas/FileSize"
  schemas:
    SuccessResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              anyOf:
                - type: string
                - type: number
                - type: integer
                - type: boolean
                - type: array
                  items: {}
                - type: object
                  description: When the interface returns success, this field is the specific success information
    SuccessResponseString:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: string
              description: When the interface returns success, this field is the specific success information
    SuccessResponseInterface:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              anyOf:
                - type: string
                - type: number
                - type: integer
                - type: boolean
                - type: array
                  items: {}
                - type: object
                  description: When the interface returns success, this field is the specific success information
    
    SuccessResponseInteger:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: integer
              description: When the interface returns success, this field is the specific success information
    SuccessResponseArray:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: array
              description: When the interface returns success, this field is the specific success information
              items: 
                type: string
                example: "/test"
    BaseResponse:
      properties:
        message:
          readOnly: true
          description: message returned by server side if there is any
          type: string
          example: ""

    # deprecated
    # just for compatibility
    DeprecatedFileSize:
      type: integer
      description: file or folder size
      example: 1024
  
    FileSize:
      type: integer
      description: file or folder size
      format: int64
      example: 1024

    FileModel:
      properties:
        name:
          type: string
          description: file / folder name
          example: "DATA"
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        is_dir:
          type: boolean
          description: is directory
          example: true
        modified:
          type: integer
          description: last modified time
          example: 2323232323
          format: int64
        sing:
          type: string
          description: file signature
          example: "0x1234567890"
        thumb:
          type: string
          description: file thumbnail
          example: ""
        path:
          type: string
          description: file path
          example: "/DATA"
        type:
          type: integer
          description: file type
          example: 0
        extensions:
          anyOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items: {}
            - type: object
          description: file extensions
          example: "mounted"
    FileListByCompression:
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/FileModelByCompression"
        total:
          type: integer
          description: total number of files
          example: 100
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"

    FileList:
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/FileModel"
        total:
          type: integer
          description: total number of files
          example: 100
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        index:
          type: integer
          description: current page index
          example: 1
    FileFromTaskModel:
      properties:
        from:
          type: string
          description: source path
          example: "/DATA/test"
        finished:
          type: boolean
          description: is finished
          example: true
        size:
          type: integer
          description: file size
          example: 1024
          format: int64
        processed_size:
          type: integer
          description: processed size
          format: int64
          example: 1024
        total_file_num:
          type: integer
          description: file num
          example: 1024
        processed_file_num:
          type: integer
          description: processed file num
          example: 1024
    
    FileTaskModel:
      properties:
        item:
          type: array
          items:
            $ref: "#/components/schemas/FileFromTaskModel"
        to:
          type: string
          description: target path
          example: "/DATA/test"
        type:
          type: string
          description: task type
          enum:
            - copy
            - move
            - duplicate
          example: "copy"
        total_size:
          type: integer
          description: total size
          example: 1024
          format: int64
        processed_size:
          type: integer
          description: processed size
          example: 1024
          format: int64
        total_file_num:
          type: integer
          description: file num
          example: 1024
        processed_file_num:
          type: integer
          description: processed file num
          example: 1024
        style:
          type: string
          description: task style
          example: "normal"
        finished:
          type: boolean
          description: is finished
          example: true

    TaskConflictList:
      properties:
        origin_path:
          type: string
          description: origin path
          example: "/DATA/test.txt"
        target_path:
          type: string
          description: target path
          example: "/DATA/aa/test.txt"
        current_path:
          type: string
          description: current path
          example: "/DATA/aa/test_1.txt"

    FileTaskModelResult:
      properties:
        to:
          type: string
          description: target path
          example: "/DATA/test"
        type:
          type: string
          description: task type
          enum:
            - copy
            - move
            - duplicate
          example: "copy"
        total_size:
          type: integer
          description: total size
          example: 1024
          format: int64
        total_file_num:
          type: integer
          description: file num
          example: 1024
        status:
          type: string
          description: task status
          enum:
            - conflict
            - failed
            - processing
          example: "conflict"
        item:
          type: array
          items:
            $ref: "#/components/schemas/TaskConflictList"
          
    FolderModel:
      properties:
        name:
          type: string
          description: folder name
          example: "DATA"
        path:
          type: string
          description: folder path
          example: "/DATA"
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        free:
          type: integer
          description: folder free size
          example: 1024
        file_count:
          type: integer
          description: file count
          example: 100
        modified:
          type: integer
          description: last modified time
          example: 2323232323
          format: int64
        extensions:
          anyOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items: {}
            - type: object
          description: folder extensions
          example: "mounted"
        read_only:
          type: boolean
          description: is read only
          example: true
    PutFileModel:
      properties:
        path:
          type: string
          example: "/DATA/test.log"
        new_path:
          type: string
          example: "/DATA/test.log"
        content:
          type: string
          example: "test"

    ShareModel:
      properties:
        name:
          type: string
          example: "ZimaOS_HD"
        path:
          type: string
          example: "/media/ZimaOS-HD"
        anonymous:
          type: boolean
          example: true
          deprecated: true
        id:
          type: integer
          example: 1
          deprecated: true
        permission:
          type: array
          items:
            $ref: "#/components/schemas/UserPermission"

    UserPermission:
      properties:
        user:
          type: string
          example:
            - "casaos" 
            - "guest"
        read:
          type: boolean
          example: true
        write:
          type: boolean
          example: true

    ShareListModel:
      properties:
        name:
          type: string
          example: "ZimaOS_HD"
        path:
          type: string
          example: "/media/ZimaOS-HD"
        id:
          type: integer
          example: 1
        users:
          type: array
          items:
            type: string
            example: "users"

    ConnectModel:
      properties:
        id:
          type: integer
          example: 1
        host:
          type: string
          example: "http://192.168.1.1"
        port:
          type: string
          example: "445"
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
        mount_point:
          type: string
          example: "/DATA"
    CreateConnectModel:
      properties:
        host:
          type: string
          example: "http://192.168.1.1"
        port:
          type: string
          example: "445"
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
    CloudModel:
      properties:
        fs:
          type: string
          example: "s3"
        type:
          type: string
          example: "s3"
        mount_point:
          type: string
          example: "/DATA"
        name:
          type: string
          example: "s3"
        icon:
          type: string
          example: "s3.png"
        size:
          type: string
          example: "292839"
        used:
          type: string
          example: "292839"  
    DriverModel:
      properties:
        auth_url:
          type: string
          example: ""
        icon:
          type: string
          example: "s3.png"
        name:
          type: string
          example: "s3"
    PeerModel:
      properties:
        id:
          type: string
          example: "1"
        model:
          type: string
          example: "iPhone"
        os:
          type: string
          example: "iOS"
        browser:
          type: string
          example: "Safari"
        device_name:
          type: string
          example: "iPhone"
        display_name:
          type: string
          example: "iPhone"
    HistoryModel:
      properties:
        id:
          type: string
          example: "1"
        path:
          type: string
          example: "/DATA/test.log"
        is_dir:
          type: boolean
          example: true
        time:
          type: integer
          example: 1682403656
          format: int64
        modify_time:
          type: integer
          example: 1682403656
          format: int64
    DecompressModel:
      properties:
        file_path:
          type: string
          example: /DATA.zip
        target_path:
          type: string
          example: /DATA
    FileModelByCompression:
      properties:
        name:
          type: string
          description: file / folder name
          example: "DATA"
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        is_dir:
          type: boolean
          description: is directory
          example: true
        modified:
          type: integer
          description: last modified time
          example: 2323232323
          format: int64
        path:
          type: string
          description: file path
          example: "/DATA"
    PinList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PinModel"
    PinModel:
      properties:
        index:
          type: integer
          example: 1
        path:
          type: string
          example: "/DATA/test.log"
        font:
          type: string
          example: "Arial"
        name:
          type: string
          example: "test"
        type:
          type: string
          enum:
            - "pin"
    ConnectAndCloudAggrgation:
      required:
        - name
        - font
        - path
        - type
        - extensions
      type: object
      properties:
        name:
          type: string
          example: "SD"
        font:
          type: string
          example: "aaaa"
        path:
          type: string
          example: "/dev/md0"
        type:
          type: string
          enum:
            - "cloud"
            - "smb"
            - "dropbox"
            - "onedrive"
            - "drive"
        extensions:
          type: object
          description: extensions
          example: "mounted"
      
    MigrationType:
      type: string
      enum:
        - "docker_image"
        - "app_data"
        - "user_data"

    MigrationStartModel:
      type: object
      properties:
        targetPath:
          type: string
          example: "/media/Safe-Storage"
        type:
          type: string
          $ref: "#/components/schemas/MigrationType"

    MigrationStateModel:
      type: object
      properties:
        id:
          type: integer
          example: 1

    MigratablePathModel:
      type: object
      required:
        - path
        - present
        - storage_name
      properties:
        path:
          type: string
          example: "/media/Safe-Storage"
        present:
          type: boolean
          example: true
        storage_name:
          type: string
          example: "Safe-Storage"
    
    MigrateState:
      type: string
      enum:
        - "idle"
        - "migrating"
        - "rolling"
        - "error"
        - "success"