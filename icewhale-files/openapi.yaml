openapi: 3.0.3

info:
  title: IceWhale-Files API
  version: v2.0.0
  description: |
    <picture>
        <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800px.png">
        <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png">
        <img alt="CasaOS" src="https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png">
    </picture>

    The api provides file-related interfaces

    For issues and discussions, please visit the [GitHub repository](https://github.com/IceWhaleTech/CasaOS) or join [our Discord](https://discord.gg/knqAbbBbeX).

servers:
  - url: /v2
    description: Development server
  - url: /v2_1/files
    # This path is maintained to ensure compatibility with the older v2 version of the API. Due to its integration across multiple projects, we have introduced a new version v2_1 to accommodate enhancements while still supporting the existing implementations that depend on v2. This strategy ensures a smooth transition and minimal disruption to ongoing services.
    description: Development server

tags:
  - name: Health methods
    description: |-
      Health Check Interface
  - name: File
    description: |-
      File-related interfaces
  - name: Folder
    description: |-
      Folder-related interfaces
  - name: Share
    description: |-
      Samba share folder
  - name: Connect
    description: |-
      Connect samba service
  - name: Recover
    description: |-
      Mount callback receive
  - name: Cloud
    description: |-
      Cloud storage
  - name: Driver
    description: |-
      Driver
  - name: Image
    description: |-
      Image
  - name: DataMigration
    description: |-
      DataMigration API
  - name: ShareViaLink
    description: |-
      Share via link API
  - name: Task
    description: |-
      Task API
  - name: Service
    description: |-
      Service management
  - name: Storage
    description: |-
      Storage API
  - name: MediaInfo
    description: |-
      MediaInfo API

security:
  - access_token: []

paths:
  /health/dependencies:
    get:
      tags:
        - Health methods
      summary: Get service status
      description: |-
        Get service status
      operationId: getHealthServices
      responses:
        "200":
          $ref: "#/components/responses/GetHealthServicesOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file:
    get:
      tags:
        - File
      summary: Get a list of files in a folder
      description: Get all files and folders under a folder
      operationId: getFiles
      parameters:
        - name: path
          in: query
          description: Folder path
          example: "/DATA"
          required: true
          schema:
            type: string
        - name: index
          in: query
          description: Page number
          required: false
          example: 1
          schema:
            type: integer
        - name: size
          in: query
          description: Page size
          required: false
          example: 10
          schema:
            type: integer
        - name: sfz
          in: query
          description: send folder size by socket
          example: "true"
          schema:
            type: string
        - name: sort
          in: query
          description: file sort
          required: false
          example: "date"
          schema:
            type: string
            enum:
              - "date"
              - "name"
              - "size"
              - "format"
        - name: direction
          in: query
          description: File Sorting
          example: "true"
          schema:
            type: string
            enum:
              - "desc"
              - "asc"
      responses:
        "200":
          $ref: "#/components/responses/GetFilesOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - File
      summary: Create a new file
      description: Create a new file
      operationId: postCreateFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  example: "/DATA/test.log"
              required:
                - path
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      tags:
        - File
      summary: Modify file
      description: Modify file
      operationId: putFile
      requestBody:
        $ref: "#/components/requestBodies/PutFile"
      responses:
        "200":
          $ref: "#/components/responses/ResponseInterfaceOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      tags:
        - File
      description: Delete a file permanently
      operationId: deleteFiles
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      responses:
        "200":
          $ref: "#/components/responses/ResponseArrayOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /file/stats:
    # 这里用 post 是因为 get 请求的 url 长度有限制
    post:
      tags:
        - File
      description: Get file or folder stats
      operationId: getFileOrFolderStats
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      responses:
        "200":
          $ref: "#/components/responses/FileOrFolderStatsOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"

  /file/trash:
    delete:
      tags:
        - File
      description: Move files to trash
      operationId: moveFilesToTrash
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      responses:
        "200":
          $ref: "#/components/responses/ResponseFileListOperationOK"

  /file/video/generate/image:
    post:
      tags:
        - File
      summary: Generate video thumbnail
      description: Generate video thumbnail
      operationId: postVideoThumbnail
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/online:
    get:
      tags:
        - File
      summary: open file online
      description: open file online
      operationId: getFilesOnline
      parameters:
        - name: path
          in: query
          description: Folder path
          example: "/DATA"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/compression:
    post:
      tags:
        - File
      summary: file decompress
      description: decompress zip 7z rar file
      operationId: postDecompress
      requestBody:
        $ref: "#/components/requestBodies/PostDecompress"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    get:
      tags:
        - File
      summary: preview a compression file
      description: preview a compression file
      operationId: getCompression
      parameters:
        - name: path
          in: query
          description: file path
          example: "/DATA.zip"
          required: true
          schema:
            type: string
        - name: in_path
          in: query
          description: path in the compressed package
          example: "data"
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GetFilesOKByCompression"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /file/download:
    # 改为 /file/download，和下面 /file/upload 对应
    #
    # 如果 HTTP 请求头包含 Accept: application/json:
    #     - 保持原逻辑
    #     - 遇到不合适的文件（二进制文件）或者目录则返回 404
    #
    # 如果 HTTP 请求头包含 Accept: text/plain
    #     - 返回文本文件内容
    #     - 遇到不合适的文件（二进制文件）或者目录则返回 404
    #
    # 如果 HTTP 请求头包含 Accept: application/octet-stream:
    #
    #     - 如果 path 是一个目录，则尝试打包压缩为 zip 并输出（Content-Type: application/octet-stream）
    #     - 如果 path 是一个文件，则直接输出（Content-Type: application/octet-stream）
    get:
      operationId: getFileDownload
      tags:
        - File
      description: Get file content(Merge to /file(get) interface)
      parameters:
        - name: path
          in: query
          description: File path
          required: true
          example: "/DATA/test.log"
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/upload:
    get:
      tags:
        - File
      summary: Check upload chunk
      parameters:
        - name: path
          in: query
          description: File path
          required: true
          example: "/DATA/test.log"
          schema:
            type: string
        - name: relativePath
          in: query
          description: File path
          required: true
          example: "/DATA/test.log"
          schema:
            type: string
        - name: filename
          in: query
          description: File name
          required: true
          example: "test.log"
          schema:
            type: string
        - name: chunkNumber
          in: query
          description: chunk number
          required: true
          example: 1
          schema:
            type: string
        - name: totalChunks
          in: query
          description: total chunks
          example: 2
          required: true
          schema:
            type: integer
      description: Check if the file block has been uploaded (needs to be modified later)
      operationId: checkUploadChunk
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - File
      summary: Upload file
      description: Upload file
      operationId: postUploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                relativePath:
                  type: string
                  example: "/DATA/test.log"
                filename:
                  type: string
                  example: "/DATA/test2.log"
                totalChunks:
                  type: string
                  example: "2"
                chunkNumber:
                  type: string
                  example: "20"
                path:
                  type: string
                  example: "/DATA"
                file:
                  type: string
                  format: binary
                chunkSize:
                  type: string
                  example: "1024"
                currentChunkSize:
                  type: string
                  example: "1024"
                totalSize:
                  type: string
                  example: "1024"
                identifier:
                  type: string
                  example: "test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/uploadV2:
    post:
      tags:
        - File
      summary: Upload file V2
      description: Upload file V2
      operationId: postUploadFileV2
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                path:
                  type: string
                  example: "/DATA"
                modTime:
                  type: string
                  example: "1682403656"
                file:
                  type: string
                  format: binary
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /file/history:
    get:
      tags:
        - File
      summary: Get file history list
      description: Get file history list
      operationId: getFileHistory
      parameters:
        - name: index
          in: query
          description: index of history
          example: 1
          schema:
            type: integer
        - name: size
          in: query
          description: size of history
          example: 22
          schema:
            type: integer
        - name: type
          in: query
          description: type of history
          example: "all"
          schema:
            type: string
            enum:
              - "file"
              - "folder"
              - "all"
      responses:
        "200":
          $ref: "#/components/responses/ResponseHistoryOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - File
      summary: create a file history
      description: create a file history
      operationId: postFileHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "/DATA/test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseArrayOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Delete all history
      tags:
        - File
      description: Delete all history
      operationId: deleteAllHistory
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /file/history/{id}:
    delete:
      summary: Delete history by id
      tags:
        - File
      description: Delete history
      operationId: deleteHistory
      parameters:
        - name: id
          in: path
          description: History id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /file/search:
    # disable or enable search
    get:
      tags:
        - File
      summary: Get search status
      description: Get the current status of the search service
      operationId: getSearchStatus
      responses:
        "200":
          $ref: "#/components/responses/ResponseSearchStatusOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      tags:
        - File
      summary: Set search status
      description: Set the status of the search service
      operationId: setSearchStatus
      parameters:
        - name: status
          in: query
          description: ssh status
          required: true
          schema:
            type: string
            enum:
              - enable
              - disable
            example: "enable"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /filedrop/ws:
    get:
      tags:
        - filedrop
      summary: File transfer socket server
      description: Flash-enabled socket server
      operationId: fileWSServer
      parameters:
        - name: peer
          in: query
          description: peer id
          required: false
          example: "123456789000d0d0d0d0d0d0"
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /filedrop/peers:
    get:
      summary: Get filedrop peers
      tags:
        - filedrop
      operationId: getFiledropPeers
      responses:
        "200":
          $ref: "#/components/responses/ResponsePeersOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /folder:
    get:
      summary: Get folder info
      tags:
        - Folder
      description: Get folder info, Split by ","
      operationId: getFolderInfo
      parameters:
        - name: path
          in: query
          description: File or folder path
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: Whether to calculate the size of the folder
          schema:
            type: boolean
            example: true
      responses:
        "200":
          $ref: "#/components/responses/ResponseFolderOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      tags:
        - Folder
      summary: Create a folder
      description: Create a folder
      operationId: createFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  example: "/DATA/test.log"
              required:
                - path
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      tags:
        - Folder
      summary: Modify folder name
      description: Modify folder name
      operationId: putFolderName
      parameters:
        - name: path
          in: query
          description: File or folder path
          required: true
          example: "/DATA/test"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_path:
                  type: string
                  example: "/DATA/test2"
              required:
                - new_path
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      tags:
        - Folder
      summary: Delete the folder
      description: Delete the folder
      operationId: deleteFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: "/DATA/test.log"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /task/{id}:
    put:
      deprecated: true
      summary: Modify operate task
      tags:
        - File
        - Folder
      description: Modify operate task
      operationId: putOperateTask
      parameters:
        - name: id
          in: path
          description: Task id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operate:
                  type: string
                  example: "success"
                  enum:
                    - "skip"
                    - "rename"
                    - "overwrite"
              required:
                - operate
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Delete operate task
      deprecated: true
      tags:
        - File
        - Folder
      description: Delete operate task
      operationId: deleteOperateTask
      parameters:
        - name: id
          in: path
          description: Task id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /task:
    # get:
    #   summary: Get task list
    #   tags:
    #     - File
    #     - Folder
    #   description: Get task list
    #   operationId: getOperateTask
    #   responses:
    #     "200":
    #       $ref: "#/components/responses/GetTaskListOK"
    #     "400":
    #       $ref: "#/components/responses/ResponseClientError"
    #     "404":
    #       $ref: "#/components/responses/ResponseNotFoundError"
    #     "500":
    #       $ref: "#/components/responses/ResponseInternalServerError"

    post:
      summary: create a task
      deprecated: true
      tags:
        - File
        - Folder
      description: create a task
      operationId: postOperateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileTaskModel"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /task/retry:
    post:
      summary: Retry task
      tags:
        - Task
      description: Retry task
      requestBody:
        $ref: "#/components/requestBodies/TaskOperateRequest"
      operationId: retryTask
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"

  /task/copy:
    post:
      summary: Copy file or folder
      tags:
        - Task
      description: Copy file or folder
      operationId: copyFileOrFolder
      requestBody:
        $ref: "#/components/requestBodies/FileOperateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreateTaskOK"

  /task/cut:
    post:
      summary: Cut file or folder
      tags:
        - Task
      description: Cut file or folder
      operationId: cutFileOrFolder
      requestBody:
        $ref: "#/components/requestBodies/FileOperateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreateTaskOK"

  /task/duplicate:
    post:
      summary: Duplicate file or folder
      tags:
        - Task
      description: Duplicate file or folder
      operationId: duplicateFileOrFolder
      requestBody:
        $ref: "#/components/requestBodies/DuplicateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreateTaskOK"

  /task/decompress:
    post:
      summary: Decompress file
      tags:
        - Task
      description: Decompress file
      operationId: decompressFile
      requestBody:
        $ref: "#/components/requestBodies/DecompressRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreateTaskOK"

  /file/storage/predelete:
    post:
      summary: Check if app data is located on a storage before stopping use
      tags:
        - Storage
      description: Checks if app data is located on the storage that's about to be disabled or formatted
      operationId: predeleteStorage
      parameters:
        - name: path
          in: query
          required: true
          description: |-
            Filter the delete by path
          schema:
            type: string
            example: "/dev/sda"
      responses:
        "200":
          $ref: "#/components/responses/ResponsePreDeleteStorageOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /file/storage:
    delete:
      summary: Delete a storage
      description: |-
        Delete a storage by path
      operationId: deleteStorage
      tags:
        - Storage
      parameters:
        - name: path
          in: query
          required: true
          description: |-
            Filter the delete by path
          schema:
            type: string
            example: "/dev/sda"
        - name: force
          in: query
          required: true
          description: |-
            Force delete the storage
          schema:
            type: boolean
            example: true
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /task/import:
    post:
      summary: Import file or folder to ZimaOS(copy)
      tags:
        - Task
      description: Import file or folder to ZimaOS
      operationId: importFileOrFolder
      requestBody:
        $ref: "#/components/requestBodies/FileOperateRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreateTaskOK"

  /task/migrate:
    post:
      summary: Migrate file or folder from ZimaOS(move to)
      tags:
        - Task
      description: Migrate file or folder to ZimaOS
      operationId: migrateFileOrFolder
      requestBody:
        $ref: "#/components/requestBodies/MigrationRequest"
      responses:
        "200":
          $ref: "#/components/responses/CreateTaskOK"

  /tasks:
    get:
      operationId: getTaskList
      description: get task list by filter(visible). status(pending, running, success, failed) is wip
      tags:
        - Task
      parameters:
        - name: visible
          in: query
          description: filter task by visible
          required: false
          example: true
          schema:
            type: boolean
        - name: order
          in: query
          description: order by task status
          required: false
          schema:
            type: string
            enum:
              - create_time
              - finish_time
              - business_logic
      responses:
        "200":
          $ref: "#/components/responses/GetTaskListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      tags:
        - Task
      description: cancel some task
      operationId: cancelAndHideTask
      requestBody:
        $ref: "#/components/requestBodies/TaskOperateRequest"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /share:
    get:
      summary: Get share list
      tags:
        - Share
      description: Get share list
      operationId: getSharesList
      responses:
        "200":
          $ref: "#/components/responses/ResponseSharesListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: Create a share
      tags:
        - Share
      description: Create a share
      operationId: createShare
      requestBody:
        $ref: "#/components/requestBodies/PostShare"
      responses:
        "200":
          $ref: "#/components/responses/ResponseUpsertShareOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      summary: Modify a share
      tags:
        - Share
      description: Modify a share
      operationId: modifyShare
      requestBody:
        $ref: "#/components/requestBodies/PutShare"
      responses:
        "200":
          $ref: "#/components/responses/ResponseUpsertShareOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: Delete a share
      tags:
        - Share
      description: Delete a share
      operationId: deleteShareByPath
      parameters:
        - name: path
          in: query
          description: Share path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /share/{id}:
    delete:
      summary: Delete a share
      tags:
        - Share
      description: Delete a share
      operationId: deleteShare
      parameters:
        - name: id
          in: path
          description: Share id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /share/list:
    get:
      summary: Get share list
      tags:
        - Share
      description: Get share list
      operationId: getShareList
      parameters:
        - name: path
          in: query
          description: Share path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseShareListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /share/samba:
    get:
      summary: Get Samba service status
      tags:
        - Share
      description: Get the current status of the Samba service (enabled/disabled)
      operationId: getSambaServiceStatus
      responses:
        "200":
          $ref: "#/components/responses/GetSambaStatusOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      summary: Set Samba service status
      tags:
        - Share
      description: Enable or disable the Samba service
      operationId: setSambaServiceStatus
      parameters:
        - name: status
          in: query
          description: samba status
          required: true
          schema:
            type: string
            enum:
              - enable
              - disable
            example: "enable"
      responses:
        "200":
          $ref: "#/components/responses/ResponseOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /share/samba/features:
    get:
      summary: Get status of a single Samba feature
      tags:
        - Share
      description: Get the current status of a specific Samba feature
      operationId: getSambaFeatureStatus
      parameters:
        - name: feature
          in: query
          description: Name of the Samba feature to check
          required: true
          schema:
            $ref: "#/components/schemas/SambaFeatures"
      responses:
        "200":
          $ref: "#/components/responses/GetSambaFeatureStatusOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      summary: Configure multiple Samba features
      tags:
        - Share
      description: Enable or disable multiple Samba features in a single request
      operationId: setSambaFeatures
      parameters:
        - name: feature
          in: query
          description: List of Samba features to enable or disable
          required: true
          schema:
            $ref: "#/components/schemas/SambaFeatures"
        - name: status
          in: query
          description: Whether to enable the Samba features
          required: true
          schema:
            type: boolean
      responses:
        "200":
          $ref: "#/components/responses/ResponseOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /connect:
    get:
      summary: Get connect list
      tags:
        - Connect
      description: Get connect list
      operationId: getConnectList
      responses:
        "200":
          $ref: "#/components/responses/ResponseConnectListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: Create a connect
      tags:
        - Connect
      description: Create a connect
      operationId: createConnect
      requestBody:
        $ref: "#/components/requestBodies/PostConnect"
      responses:
        "200":
          $ref: "#/components/responses/ResponseInterfaceOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /web/connect_cloud:
    get:
      summary: Get web connect list and cloud list
      tags:
        - Connect
      description: Get web connect list and cloud list
      operationId: getWebConnectAndCloud
      responses:
        "200":
          $ref: "#/components/responses/ResponseConnectAndCloudOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /connect/{id}:
    delete:
      summary: Delete a connect
      tags:
        - Connect
      description: Delete a connect
      operationId: deleteConnect
      parameters:
        - name: id
          in: path
          description: Connect id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /recover/{type}/:
    get:
      summary: Callback Address
      security: []
      tags:
        - Recover
      description: Callback Address
      operationId: getRecoverCallback
      parameters:
        - name: type
          in: path
          description: Recover type
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /cloud:
    get:
      summary: Get cloud list
      tags:
        - Cloud
      description: Get cloud list
      operationId: getCloudList
      responses:
        "200":
          $ref: "#/components/responses/GetCloudListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /cloud/{name}:
    delete:
      summary: Delete a cloud
      tags:
        - Cloud
      description: Delete a cloud
      operationId: deleteCloud
      parameters:
        - name: name
          in: path
          description: Cloud name
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /driver:
    get:
      summary: Get driver list
      tags:
        - Driver
      description: Get driver list
      operationId: getDriverList
      responses:
        "200":
          $ref: "#/components/responses/GetDriverListOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /thumbnail:
    get:
      summary: Get file thumbnail
      tags:
        - Image
      description: Get file thumbnail
      operationId: getThumbnail
      parameters:
        - name: path
          in: query
          description: file type
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /pin:
    get:
      summary: get pins
      tags:
        - Pin methods
      description: getpins
      operationId: getPin
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: post a pin
      tags:
        - Pin methods
      description: add a pin
      operationId: postPin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinModel"
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      summary: put a pin
      tags:
        - Pin methods
      description: update a pin
      operationId: putPin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinList"
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    delete:
      summary: delete a pin
      tags:
        - Pin methods
      description: Pin
      operationId: deletePin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinModel"
      responses:
        "200":
          $ref: "#/components/responses/GetPinOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /migration/info:
    get:
      summary: Get migration info(path)
      tags:
        - DataMigration
      description: Get migration info
      operationId: getMigrationInfo
      responses:
        "200":
          $ref: "#/components/responses/GetMigratablePathInfoOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /migration/state:
    get:
      summary: Get migration state
      tags:
        - DataMigration
      description: Get migration state
      operationId: getMigrationState
      parameters:
        - name: id
          in: query
          description: migration task id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GetMigrationStateOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /migration/size/{type}:
    get:
      summary: Get migration size
      tags:
        - DataMigration
      description: Get migration size
      parameters:
        - name: type
          in: path
          description: migration type
          required: true
          schema:
            $ref: "#/components/schemas/MigrationType"
      operationId: getMigrationSize
      responses:
        "200":
          $ref: "#/components/responses/GetMigratablePathSizeOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /migration/err:
    get:
      tags:
        - DataMigration
      description: Get migration error info(the request only in the migration is error work. otherwise return 400)
      operationId: getMigrationErrorInfo
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /migration/start:
    post:
      summary: Start migration
      tags:
        - DataMigration
      description: Start migration
      operationId: startMigration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrationStartModel"
      responses:
        "200":
          $ref: "#/components/responses/GetMigrationStateOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /migration/reset:
    post:
      tags:
        - DataMigration
      description: Reset migratiable data
      operationId: ResetData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - reset_type
              type: object
              properties:
                reset_type:
                  type: string
                  $ref: "#/components/schemas/MigrationType"
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /torrent:
    get:
      summary: Get torrent list
      tags:
        - ShareViaLink
      description: Get torrent list
      operationId: getShares
      responses:
        "200":
          $ref: "#/components/responses/GetShareLinksOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    post:
      summary: Create a link
      tags:
        - ShareViaLink
      description: Create a link
      operationId: startShare
      parameters:
        - name: infohash
          in: query
          description: Info hash
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /torrent/precreate:
    post:
      summary: Precreate a link
      tags:
        - ShareViaLink
      description: Precreate a link
      operationId: prepareShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file_paths:
                  type: array
                  items:
                    type: string
                  example: ["/media/Movies/1.mp4"]
      responses:
        "200":
          $ref: "#/components/responses/GetShareLinkOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /torrent/{info_hash}:
    get:
      summary: Get link info
      tags:
        - ShareViaLink
      description: Get link info
      operationId: getShare
      parameters:
        - name: info_hash
          in: path
          description: Link Info hash
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GetShareLinkOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
    put:
      tags:
        - ShareViaLink
      description: Stop a share
      operationId: stopShare
      parameters:
        - name: info_hash
          in: path
          description: Link Info hash
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResponseStringOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"
  /trash:
    get:
      description: Get all list in Trash
      tags:
        - Trash
      parameters:
        - name: filter
          in: query
          description: Target storage name
          example: "operable"
          required: false
          schema:
            type: string
            enum:
              - all
              - operable
      operationId: getTrashFileList
      responses:
        "200":
          $ref: "#/components/responses/ResponseTrashOK"

    delete:
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      description: Delete a file or folder in Trash. means delete a file forever
      tags:
        - Trash
      operationId: deleteTrashFile
      responses:
        "200":
          $ref: "#/components/responses/ResponseFileListOperationOK"

    post:
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      description: Restore a file or folder in Trash
      tags:
        - Trash
      operationId: restoreTrashFile
      responses:
        "200":
          $ref: "#/components/responses/ResponseFileListOperationOK"

  /trash/empty:
    post:
      tags:
        - Trash
      description: Delete All file in trash
      operationId: emptyTrash
      responses:
        "200":
          $ref: "#/components/responses/ResponseOK"

  /trash/stats:
    get:
      description: Get trash Stats Data
      parameters:
        - name: filter
          in: query
          description: Target storage name
          example: "operable"
          required: false
          schema:
            type: string
            enum:
              - all
              - operable
      tags:
        - Trash
      operationId: getTrashStats
      responses:
        "200":
          $ref: "#/components/responses/GetTrashStatsOK"

  /mediainfo:
    post:
      tags:
        - MediaInfo
      description: Get media info
      operationId: getMediaInfo
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      responses:
        "200":
          $ref: "#/components/responses/GetMediaInfoOK"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /web/path/check:
    post:
      tags:
        - Web
      description: Check path is by used
      operationId: checkPathIsByUsed
      requestBody:
        $ref: "#/components/requestBodies/FileListRequest"
      responses:
        "200":
          $ref: "#/components/responses/ResponsePathCheckOK"
        "400":
          $ref: "#/components/responses/ResponseClientError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

components:
  securitySchemes:
    access_token:
      type: apiKey
      in: header
      name: Authorization
  parameters:
    TaskID:
      name: id
      in: path
      description: task id
      required: true
      schema:
        type: string
  requestBodies:
    FileListRequest:
      description: File list, used in Delete files
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              example: "/DATA/test.log"

    PutFile:
      description: Create file
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/PutFileModel"
            required:
              - path
    PostDecompress:
      description: create decompress
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/DecompressModel"
    PostShare:
      description: Create share
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ShareModel"
              required:
                - path
    PutShare:
      description: Modify share
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/ShareModel"
            required:
              - path
    PostConnect:
      description: Create connect
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/CreateConnectModel"
            required:
              - host
              - username
              - password

    FileOperateRequest:
      description: File operate request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileOperateProps"

    DuplicateRequest:
      description: Duplicate request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DuplicateProps"

    DecompressRequest:
      description: Decompress request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DecompressProps"

    MigrationRequest:
      description: Migration request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MigrationProps"

    TaskOperateRequest:
      description: Task operate request
      content:
        application/json:
          schema:
            type: object
            required:
              - task_list
            properties:
              task_list:
                type: array
                items:
                  type: integer
                  format: uint

  responses:
    ResponseOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponse"
    ResponseStringOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseString"
    ResponseIntegerOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseInteger"

    ResponseArrayOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseArray"
    ResponseConnectAndCloudOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ConnectAndCloudAggrgation"
    ResponseInterfaceOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseInterface"
    ResponseConnectListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ConnectModel"
    ResponseInternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
    ResponseNotFoundError:
      description: Not found error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
    ResponseClientError:
      description: Client Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
    ResponseFolderOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FolderModel"

    ResponseShareListOK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/ShareModel"
            required:
              - path

    ResponseSharesListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ShareListModel"

    ResponseUpsertShareOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/ShareModel"

    ResponsePeersOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PeerModel"
    ResponseHistoryOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/HistoryModel"
    GetCloudListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CloudModel"

    GetPinOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PinModel"

    GetDriverListOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DriverModel"
    GetHealthServicesOK:
      description: OK
      content:
        application/json:
          schema:
            type: string
            example: "OK"
    GetFileOK:
      description: OK
      content:
        "*/*":
          schema:
            type: string
            format: binary
    GetFilesOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileList"
    GetFilesOKByCompression:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileListByCompression"

    GetMigratablePathInfoOK:
      description: the migration info include the path and if the path present
      content:
        application/json:
          schema:
            type: object
            required:
              - docker_image
              - app_data
              - user_data
            properties:
              docker_image:
                $ref: "#/components/schemas/MigratablePathModel"
              app_data:
                $ref: "#/components/schemas/MigratablePathModel"
              user_data:
                $ref: "#/components/schemas/MigratablePathModel"
              can_migrate:
                type: boolean
                example: true

    GetMigratablePathSizeOK:
      description: the migration info include the path and if the path present
      content:
        application/json:
          schema:
            type: object
            required:
              - size
              - total_size
            properties:
              size:
                $ref: "#/components/schemas/FileSize"
              total_size:
                $ref: "#/components/schemas/FileSize"
    GetMigrationStateOK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - state
            properties:
              id:
                type: integer
                example: 1
              state:
                $ref: "#/components/schemas/MigrateState"
              type:
                $ref: "#/components/schemas/MigrationType"
              from_storage_name:
                type: string
                example: "ZimaOS-HD"
              to_storage_name:
                type: string
                example: "Main-Storage"
              progress_label:
                type: string
                example: "create symlink"
              progress:
                type: string
                example: "20"
              total_size:
                $ref: "#/components/schemas/FileSize"
    GetShareLinkOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShareLinkJob"
    GetShareLinksOK:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ShareLinkJob"

    ResponseTrashOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TrashFile"

    ResponseFileListOperationOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileListOperationResult"

    GetTrashStatsOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StorageTrashStats"

    CreateTaskOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/Task"

    GetTaskListOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SuccessResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"

    ResponsePreDeleteStorageOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MigrationType"

    FileOrFolderStatsOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileOrFolderStat"

    ResponsePathCheckOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/PathUsedStat"

    GetSambaStatusOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/SambaStatus"

    GetSambaFeaturesOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    type: object
                    additionalProperties:
                      type: boolean
                    example:
                      samba1: true
                      multichannel: false
                      spotlight: true

    ResponseSearchStatusOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/SearchStatus"
    GetSambaFeatureStatusOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/SambaFeatureStatus"

    GetMediaInfoOK:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/MediaInfo"
  schemas:
    SuccessResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              anyOf:
                - type: string
                - type: number
                - type: integer
                - type: boolean
                - type: array
                  items: {}
                - type: object
                  description: When the interface returns success, this field is the specific success information
    SuccessResponseString:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: string
              description: When the interface returns success, this field is the specific success information
    SuccessResponseInterface:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              anyOf:
                - type: string
                - type: number
                - type: integer
                - type: boolean
                - type: array
                  items: {}
                - type: object
                  description: When the interface returns success, this field is the specific success information

    SuccessResponseInteger:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: integer
              description: When the interface returns success, this field is the specific success information
    SuccessResponseArray:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: array
              description: When the interface returns success, this field is the specific success information
              items:
                type: string
                example: "/test"
    FileOperationResult:
      required:
        - path
        - status
      properties:
        path:
          type: string
          example: "/media/ZimaOS-HD/DATA/abc.mp4"
        status:
          type: string
          enum:
            - success
            - failed
        errMsg:
          type: string
          example: "file not found"

    BaseResponse:
      properties:
        message:
          readOnly: true
          description: message returned by server side if there is any
          type: string
          example: ""

    # deprecated
    # just for compatibility
    DeprecatedFileSize:
      type: integer
      description: file or folder size
      example: 1024

    FileSize:
      type: integer
      description: file or folder size
      format: int64
      example: 1024

    FileModel:
      properties:
        name:
          type: string
          description: file / folder name
          example: "DATA"
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        is_dir:
          type: boolean
          description: is directory
          example: true
        modified:
          type: integer
          description: last modified time
          example: 2323232323
          format: int64
        sing:
          type: string
          description: file signature
          example: "0x1234567890"
        thumb:
          type: string
          description: file thumbnail
          example: ""
        path:
          type: string
          description: file path
          example: "/DATA"
        type:
          type: integer
          description: file type
          example: 0
        extensions:
          $ref: "#/components/schemas/FileExtension"

    FileListByCompression:
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/FileModelByCompression"
        total:
          type: integer
          description: total number of files
          example: 100
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"

    FileList:
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/FileModel"
        total:
          type: integer
          description: total number of files
          example: 100
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        index:
          type: integer
          description: current page index
          example: 1
    FileFromTaskModel:
      properties:
        from:
          type: string
          description: source path
          example: "/DATA/test"
        finished:
          type: boolean
          description: is finished
          example: true
        size:
          type: integer
          description: file size
          example: 1024
          format: int64
        processed_size:
          type: integer
          description: processed size
          format: int64
          example: 1024
        total_file_num:
          type: integer
          description: file num
          example: 1024
        processed_file_num:
          type: integer
          description: processed file num
          example: 1024

    # TODO 回头把用不到的这些都删掉
    FileTaskModel:
      properties:
        item:
          type: array
          items:
            $ref: "#/components/schemas/FileFromTaskModel"
        to:
          type: string
          description: target path
          example: "/DATA/test"
        type:
          type: string
          description: task type
          enum:
            - copy
            - move
            - duplicate
          example: "copy"
        total_size:
          type: integer
          description: total size
          example: 1024
          format: int64
        processed_size:
          type: integer
          description: processed size
          example: 1024
          format: int64
        total_file_num:
          type: integer
          description: file num
          example: 1024
        processed_file_num:
          type: integer
          description: processed file num
          example: 1024
        style:
          type: string
          description: task style
          example: "normal"
        finished:
          type: boolean
          description: is finished
          example: true

    TaskConflictList:
      properties:
        origin_path:
          type: string
          description: origin path
          example: "/DATA/test.txt"
        target_path:
          type: string
          description: target path
          example: "/DATA/aa/test.txt"
        current_path:
          type: string
          description: current path
          example: "/DATA/aa/test_1.txt"

    FileTaskModelResult:
      properties:
        to:
          type: string
          description: target path
          example: "/DATA/test"
        type:
          type: string
          description: task type
          enum:
            - copy
            - move
            - duplicate
          example: "copy"
        total_size:
          type: integer
          description: total size
          example: 1024
          format: int64
        total_file_num:
          type: integer
          description: file num
          example: 1024
        status:
          type: string
          description: task status
          enum:
            - conflict
            - failed
            - processing
          example: "conflict"
        item:
          type: array
          items:
            $ref: "#/components/schemas/TaskConflictList"

    FolderModel:
      properties:
        name:
          type: string
          description: folder name
          example: "DATA"
        path:
          type: string
          description: folder path
          example: "/DATA"
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        free:
          type: integer
          description: folder free size
          example: 1024
        file_count:
          type: integer
          description: file count
          example: 100
        modified:
          type: integer
          description: last modified time
          example: 2323232323
          format: int64
        extensions:
          anyOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items: {}
            - type: object
          description: folder extensions
          example: "mounted"
        read_only:
          type: boolean
          description: is read only
          example: true
    PutFileModel:
      properties:
        path:
          type: string
          example: "/DATA/test.log"
        new_path:
          type: string
          example: "/DATA/test.log"
        content:
          type: string
          example: "test"

    ShareModel:
      properties:
        name:
          type: string
          example: "ZimaOS_HD"
        path:
          type: string
          example: "/media/ZimaOS-HD"
        anonymous:
          type: boolean
          example: true
          deprecated: true
        id:
          type: integer
          example: 1
          deprecated: true
        tm:
          type: boolean
          example: true
          description: is time machine share folder
        permission:
          type: array
          items:
            $ref: "#/components/schemas/UserPermission"

    UserPermission:
      properties:
        user:
          type: string
          example:
            - "casaos"
            - "guest"
        read:
          type: boolean
          example: true
        write:
          type: boolean
          example: true

    ShareListModel:
      properties:
        name:
          type: string
          example: "ZimaOS_HD"
        path:
          type: string
          example: "/media/ZimaOS-HD"
        id:
          type: integer
          example: 1
        users:
          type: array
          items:
            type: string
            example: "users"

    ConnectModel:
      properties:
        id:
          type: integer
          example: 1
        host:
          type: string
          example: "http://192.168.1.1"
        port:
          type: string
          example: "445"
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
        mount_point:
          type: string
          example: "/DATA"
    CreateConnectModel:
      properties:
        host:
          type: string
          example: "http://192.168.1.1"
        port:
          type: string
          example: "445"
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
    CloudModel:
      properties:
        fs:
          type: string
          example: "s3"
        type:
          type: string
          example: "s3"
        mount_point:
          type: string
          example: "/DATA"
        name:
          type: string
          example: "s3"
        icon:
          type: string
          example: "s3.png"
        size:
          type: string
          example: "292839"
        used:
          type: string
          example: "292839"
    DriverModel:
      properties:
        auth_url:
          type: string
          example: ""
        icon:
          type: string
          example: "s3.png"
        name:
          type: string
          example: "s3"
    PeerModel:
      properties:
        id:
          type: string
          example: "1"
        model:
          type: string
          example: "iPhone"
        os:
          type: string
          example: "iOS"
        browser:
          type: string
          example: "Safari"
        device_name:
          type: string
          example: "iPhone"
        display_name:
          type: string
          example: "iPhone"
    HistoryModel:
      properties:
        id:
          type: string
          example: "1"
        path:
          type: string
          example: "/DATA/test.log"
        is_dir:
          type: boolean
          example: true
        time:
          type: integer
          example: 1682403656
          format: int64
        modify_time:
          type: integer
          example: 1682403656
          format: int64
    DecompressModel:
      properties:
        file_path:
          type: string
          example: /DATA.zip
        target_path:
          type: string
          example: /DATA
    FileModelByCompression:
      properties:
        name:
          type: string
          description: file / folder name
          example: "DATA"
        size:
          $ref: "#/components/schemas/DeprecatedFileSize"
        is_dir:
          type: boolean
          description: is directory
          example: true
        modified:
          type: integer
          description: last modified time
          example: 2323232323
          format: int64
        path:
          type: string
          description: file path
          example: "/DATA"
    PinList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PinModel"
    PinModel:
      properties:
        index:
          type: integer
          example: 1
        path:
          type: string
          example: "/DATA/test.log"
        font:
          type: string
          example: "Arial"
        name:
          type: string
          example: "test"
        type:
          type: string
          enum:
            - "pin"
    ConnectAndCloudAggrgation:
      required:
        - name
        - font
        - path
        - type
        - extensions
      type: object
      properties:
        name:
          type: string
          example: "SD"
        font:
          type: string
          example: "aaaa"
        path:
          type: string
          example: "/dev/md0"
        type:
          type: string
          enum:
            - "cloud"
            - "smb"
            - "dropbox"
            - "onedrive"
            - "drive"
        extensions:
          type: object
          description: extensions
          example: "mounted"

    MigrationType:
      type: string
      enum:
        - "docker_image"
        - "app_data"
        - "user_data"

    MigrationStartModel:
      type: object
      properties:
        targetPath:
          type: string
          example: "/media/Safe-Storage"
        type:
          type: string
          $ref: "#/components/schemas/MigrationType"

    MigratablePathModel:
      type: object
      required:
        - path
        - present
        - storage_name
      properties:
        path:
          type: string
          example: "/media/Safe-Storage"
        present:
          type: boolean
          example: true
        storage_name:
          type: string
          example: "Safe-Storage"

    MigrateState:
      type: string
      enum:
        - "idle"
        - "migrating"
        - "rolling"
        - "error"
        - "success"

    ShareLinkFile:
      type: object
      properties:
        name:
          type: string
          example: "Zima Projects 2.mp4"
        path:
          type: string
          example: "/media/Safe-Storage/Zima Projects 2.mp4"
        size:
          type: integer
          example: 1234
          format: int64
    ShareLinkJob:
      type: object
      properties:
        file_count:
          type: integer
          example: 1
        primary_file_name:
          type: string
          example: "Zima Projects 2.mp4"
        file_list:
          type: array
          items:
            $ref: "#/components/schemas/ShareLinkFile"
        location:
          type: string
          example: "/media"
        total_size:
          type: integer
          example: 1024
          format: int64
        created_at:
          type: integer
          example: 1682403656
          format: int64
        share_status:
          type: string
          enum:
            - "valid"
            - "invalid"
            - "partially_invalid"
            - "seeding"
        info_hash:
          type: string
          example: "7454c6f0912e95a1153d925ddfda01e5a84719d9"
        creator:
          type: string
          example: "IceWhaleTech"
        device_name:
          type: string
          example: "ZimaCube"
      required:
        - file_count
        - primary_file_name
        - file_list
        - location
        - total_size
        - created_at
        - share_status
        - info_hash
        - metadata

    Task:
      type: object
      required:
        - id
        - type
        - status
        - props
        - visible
        - user_id
        - created_utc
        - finished_utc
      properties:
        id:
          type: integer
          format: uint
          example: "1"
        type:
          type: string
          $ref: "#/components/schemas/TaskType"
        status:
          type: string
          $ref: "#/components/schemas/TaskStatus"
        props:
          oneOf:
            - $ref: "#/components/schemas/FileOperateProps"
            - $ref: "#/components/schemas/DecompressProps"
            - $ref: "#/components/schemas/DuplicateProps"
            - $ref: "#/components/schemas/MigrationProps"
        err_msg:
          type: string
          example: "测试错误"
        user_id:
          type: integer
          example: 1
        visible:
          type: boolean
          example: true
        created_utc:
          type: integer
          example: 1682403656
          format: int64
        finished_utc:
          type: integer
          example: 1682403656
          format: int64

        progress:
          type: integer
          example: 50
        total_item:
          type: integer
          example: 100
        processed_item:
          type: integer
          example: 50
        total_size:
          type: integer
          example: 1024
          format: int64
        processed_size:
          type: integer
          example: 1024
          format: int64
        speed:
          type: integer
          example: 1024
          format: int64

    TaskType:
      type: string
      enum:
        - "copy"
        - "move"
        - "duplicate"
        - "decompress"
        - "import"
        - "migrate"

    TaskStatus:
      type: string
      enum:
        - "pending"
        - "calculating"
        - "running"
        - "cancelled"
        - "success"
        - "failed"

    TrashFile:
      type: object
      required:
        - name
        - is_dir
        - size
        - raw_path
        - path
        - deleted_at
      properties:
        name:
          type: string
          example: "abc.mp4"
        is_dir:
          type: boolean
          example: false
        size:
          type: integer
          example: 1234
          format: int64
        raw_path:
          type: string
          example: "/media/ZimaOS-HD/Downloads/Media/Japanese/abc.mp4"
        path:
          type: string
          example: "/media/ZimaOS-HD/.trash/abc_1734076004_7194.mp4"
        deleted_at:
          type: integer
          example: 1682403656
          format: int64
        extensions:
          $ref: "#/components/schemas/FileExtension"

    StorageTrashStats:
      type: object
      required:
        - total_size
      properties:
        storage_name:
          type: string
          example: "Safe-Storage"
        total_size:
          type: integer
          format: int64

    FileExtension:
      type: object
      properties:
        mounted:
          description: 这个目录是否是挂载的，比如是smb呀什么的
          type: boolean
          example: true
        thumbnail:
          type: string
        shared:
          type: boolean
        share_id:
          type: integer
        pin:
          type: boolean
        backup:
          type: boolean
        trash_raw_disk_not_exist:
          description: 回收站专属，该文件的原盘是否在zimacube里面
          type: boolean
          example: true
        trash_raw_disk_readonly:
          type: boolean
          example: true
          description: 回收站专属，该文件的原存储是否变成只读了，比如raid缺盘
        trash_raw_disk_damaged:
          type: boolean
          example: true
          description: 回收站专属，该文件的原存储是否变成坏了，比如raid缺盘比较多

    FileListOperationResult:
      type: object
      required:
        - result
        - data
      properties:
        result:
          type: string
          enum:
            - success
            - failed
            - partial_success
        data:
          type: array
          items:
            $ref: "#/components/schemas/FileOperationResult"

    TaskUserSelect:
      type: string
      enum:
        - overwrite
        - rename
        - skip

    FileOperateProps:
      type: object
      required:
        - src
        - dst
        - user_select
      properties:
        src:
          type: array
          items:
            type: string
          example:
            [
              "/media/ZimaOS-HD/Downloads/1.zip",
              "/media/ZimaOS-HD/Downloads/2.zip",
            ]
        dst:
          type: string
          example: "/media/ZimaOS-HD"
        user_select:
          $ref: "#/components/schemas/TaskUserSelect"

    MigrationProps:
      type: object
      required:
        - src
        - dst
        - user_select
        - retain_src_file
      properties:
        src:
          type: array
          items:
            type: string
          example:
            [
              "/media/ZimaOS-HD/Downloads/1.zip",
              "/media/ZimaOS-HD/Downloads/2.zip",
            ]
        dst:
          type: string
          example: "/media/ZimaOS-HD"
        user_select:
          $ref: "#/components/schemas/TaskUserSelect"
        retain_src_file:
          type: boolean
          example: true

    DuplicateProps:
      type: object
      required:
        - src
        - dst
      properties:
        src:
          type: array
          items:
            type: string
        dst:
          type: string
          description: the des path not work. No matter what directory you specify, it will be dup to the same directory as src. This dst is just for the convenience of front-end rendering.
          example: "/media/ZimaOS-HD"

    DecompressProps:
      type: object
      required:
        - src
        - dst
        - user_select
      properties:
        src:
          type: array
          description: the compressed file path. Note! only single is allowed in array.
          items:
            type: string
          example: ["/media/ZimaOS-HD/Downloads/a.zip"]
        dst:
          type: string
          example: "/media/ZimaOS-HD/Downloads/"
        user_select:
          $ref: "#/components/schemas/TaskUserSelect"
        password:
          type: string

    SambaFeatures:
      type: string
      enum:
        - samba1
        - multichannel
        - spotlight

    SambaStatus:
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - enabled
            - disabled
          example: "enabled"

    SearchStatus:
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - enabled
            - disabled
          example: "enabled"

    SambaFeatureStatus:
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - enabled
            - disabled
          example: "enabled"

    FileOrFolderStat:
      type: object
      required:
        - total_item
        - total_size
        - is_dir
      properties:
        is_dir:
          type: boolean
          example: true
        total_item:
          type: integer
          example: 100
        total_size:
          type: integer
          example: 1024
          format: int64

    PathUsedStat:
      type: object
      required:
        - used
      properties:
        used:
          type: boolean
          example: true
        path:
          type: string
          example: "/media/ZimaOS-HD/Downloads/1.zip"
        reason:
          type: string
          enum:
            - "share"
            - "samba"
            - "pin"
            - "application"
            - "user_data"
          x-enum-varnames:
            - "share"
            - "samba"
            - "pin"
            - "application"
            - "TypeUserData"

    MediaInfo:
      type: object
      properties:
        name:
          type: string
          example: "test"
        type:
          type: string
          example: "file" # or "folder" or "MP4" or "PNG"
        items:
          type: integer
          example: 100
        subfolder:
          type: integer
          example: 100
        size:
          type: integer
          example: 1024
          format: int64
        path:
          type: string
          example: "/media/ZimaOS-HD/Downloads/1.zip"
        ctime:
          type: integer
          example: 1682403656
          format: int64
        mtime:
          type: integer
          example: 1682403656
          format: int64
        atime:
          type: integer
          example: 1682403656
          format: int64
